FUN=length)
names(bikeStat) <- c("bikeNo","NumOfRiders")
head(bikeStat);tail(bikeStat)
library(plyr)
wdayStat4CastJoin <- join(wdayStat4Cast, bikeStat, by = "bikeNo")
head(wdayStat4CastJoin);tail(wdayStat4CastJoin)
hourStat <- aggregate(bikeDataFull$ride.time,
by=list(hour=bikeDataFull$hour),
FUN=length)
plot(hourStat, type="l")
typeStat <- aggregate(bikeDataFull$ride.time,
by=list(userType=bikeDataFull$Subscription.Type,
hour=bikeDataFull$hour),
FUN=length)
typeStat
plot(typeStat[typeStat$userType=="Casual",2:3], type="l", ylab="시간대별 이용자")
plot(typeStat[typeStat$userType=="Subscriber",2:3], type="l", ylab="시간대별 이용자")
plot(typeStat[typeStat$userType=="Registered",2:3], type="l", ylab="시간대별 이용자")
typeStat2 <- aggregate(bikeDataFull$ride.time,
by=list(userType=bikeDataFull$Subscription.Type,
hour=bikeDataFull$hour),
FUN=mean)
attributes(typeStat2)
plot(typeStat2[typeStat$userType=="Casual",2:3], type="l", ylab="시간대별 평균 이용시간")
plot(typeStat2[typeStat$userType=="Subscriber",2:3], type="l", ylab="시간대별 평균 이용시간")
plot(typeStat2[typeStat$userType=="Registered",2:3], type="l", ylab="시간대별 평균 이용시간")
typeStat3 <- tapply(bikeDataFull$ride.time, bikeDataFull$Subscription.Type, mean, na.rm=T)
typeStat3
attributes(typeStat3)
typeStat4 <- tapply(bikeDataFull$ride.time, list(userType=bikeDataFull$Subscription.Type,
wDay=bikeDataFull$ride.wday), mean, na.rm=T)
attributes(typeStat4)
typeStat2 <- aggregate(bikeDataFull$ride.time,
by=list(userType=bikeDataFull$Subscription.Type,
hour=bikeDataFull$hour),
FUN=mean)
attributes(typeStat2)
plot(typeStat2[typeStat$userType=="Casual",2:3], type="l", ylab="시간대별 평균 이용시간")
plot(typeStat2[typeStat$userType=="Subscriber",2:3], type="l", ylab="시간대별 평균 이용시간")
plot(typeStat2[typeStat$userType=="Registered",2:3], type="l", ylab="시간대별 평균 이용시간")
rm(list=ls())
dir("./dataSmpl")
csvList <- dir("./dataSmpl")
substr(csvList,(nchar(csvList)-3),nchar(csvList))
bikeData <- vector(mode="list")
bikeData
csvList
csvList[1]
for (i in csvList) {
bikeData[[i] = gsub("","-History-Data-smpl",csvList[i])
}
?lapply
lapply(bikeData, dim) #리스트로 반환됨
lapply(bikeData) #리스트로 반환됨
sapply(bikeData, dim) #데이터 프레임으로 반환됨.
sapply(bikeData, dim) #데이터 프레임으로 반환됨.
?cat
rm(list=ls())
dir("./dataSmpl")
csvList <- dir("./dataSmpl")
substr(csvList,(nchar(csvList)-3),nchar(csvList))
library(stringr)
#  뒤에서 4번째 부터 첫번째 까지 짤라서 넣어요
str_sub(csvList,-4,-1)
# 빈값을 만든다.
bikeData <- vector(mode="list")
for(i in csvList) {
# assign : 메모리에 올려라
# read.csv : csv 파일을 읽는다.
# paste0("1", "2") - 두개의 해당 문자를 붙여라
# str_sub(i,1,-5) : i값 인 파일명.확장자명 이 되어 있는 것을 첫번째 부터 끝의 -5 자리 까지
# 자른다.
# 이해가 안된다면 str_sub(csvList[1],1,-5) 하나하나 씩 실행 해보기.
assign(str_sub(i,1,-5), read.csv(paste0("./dataSmpl/",i),
stringsAsFactors=FALSE))
#  get : 위에서 assign을 통해 올라온 변수에 대해서 받겠다는 의미
smplDummy <- get(str_sub(i,1,-5), envir=environment())
## cat : 문자열 붙이기 여기서 \n은 줄바꿈 문자를 의미
#   cat("\n",str_sub(i,1,-5),"\n","\n")
print(head(smplDummy))
#   smplIndex <- sample(1:dim(smplDummy)[1],1500,replace=FALSE)
#   print(head(smplIndex))
# smplDummy 라는 변수에 넣어라
assign(paste0(str_sub(i,6,7),str_sub(i,1,4)), smplDummy)
bikeData[[paste0(str_sub(i,6,7),str_sub(i,1,4))]] <- smplDummy
#   save(list=paste0(str_sub(i,6,7),str_sub(i,1,4)),
#        file=paste0("./dataSmpl/",str_sub(i,1,4),str_sub(i,6,7),".RData"))
write.csv(get(paste0(str_sub(i,6,7),str_sub(i,1,4)),envir=environment()),
file=paste0("./dataSmpl/",paste0(str_sub(i,6,7),str_sub(i,1,4)),".csv"),
row.names=FALSE, fileEncoding="CP949")
rm(list=str_sub(i,1,-5))
}
## RData 파일을 만들어서 저장해
save(bikeData, file="./dataSmpl/bikeData.RData")
print(head(smplDummy))
print(head(smplDummy))
cat("\n",str_sub(i,1,-5),"\n","\n")
print(head(smplDummy))
cat("\n",str_sub(i,1,-5),"\n","\n")
print(head(smplDummy))
rm(list=ls())
dir("./dataSmpl")
csvList <- dir("./dataSmpl")
substr(csvList,(nchar(csvList)-3),nchar(csvList))
rm(list=ls())
?reshape
rm(list=ls())
dir("./dataSmpl")
csvList <- dir("./dataSmpl")
str(csvList)
attributes(csvList)
?str_sub
?str_sub
str_sub(csvList[1],1,-5)
library(stringr)
str_sub(csvList,-4,-1)
str_sub(csvList[1],1,-5)
str_sub(csvList[1],1,-5)
bikeData <- vector(mode="list")
for(i in csvList) {
# assign : 메모리에 괄호의 내용을 등록한다.
# read.csv : csv 파일을 읽는다.
# paste0("1", "2") - 두개의 해당 문자를 붙여라  paste("1","2", sep="") 와 같은 기능을 합니다.
# str_sub(i,1,-5) : i값 인 파일명.확장자명 이 되어 있는 것을 첫번째 부터 끝의 -5 자리 까지
# 자른다.
# 이해가 안된다면 str_sub(csvList[1],1,-5) 하나하나 씩 실행 해보기.
assign(str_sub(i,1,-5), read.csv(paste0("./dataSmpl/",i),
stringsAsFactors=FALSE))
#  get : 위에서 assign을 통해 올라온 변수에 대해서 받겠다는 의미(16개)
# envir=enviroment() 는 현재 working directory의 변수모두를 가리킨다는 의미.
smplDummy <- get(str_sub(i,1,-5), envir=enviroment())
## cat : 문자열 붙이기 여기서 \n은 줄바꿈 문자를 의미
# 지금 상황에선 별기능이 없음
cat("\n",str_sub(i,1,-5),"\n","\n")
print(head(smplDummy))
# 이 부분은 파일의 길이를 좀 더 짧게 하기 위함인데
# 16개의 파일명을 확인해보면 Trips부터 뒷부분이 중복되기 때문에
# 중복되는 부분을 제외한 나머지의 이름을 합치는 역할을 합니다.
# 이 assign 을 수행하면 메모리에 Q12014 와 같은 변수가 올라갑니다.
assign(paste0(str_sub(i,6,7),str_sub(i,1,4)), smplDummy)
## bikeData List에 smplDummy 값을 넣습니다.
## index 형태는 위의 Q12014 와 같은 형태로 index가 됩니다.
bikeData[[paste0(str_sub(i,6,7),str_sub(i,1,4))]] <- smplDummy
## Q12014 , Q22014 와 같이 이름이 바뀐 값들을 csv 파일로 저장합니다.
## write.csv 함수의 설명은 강의자료를 참고하세요
write.csv(get(paste0(str_sub(i,6,7),str_sub(i,1,4)),envir=environment()),
file=paste0("./dataSmpl/",paste0(str_sub(i,6,7),str_sub(i,1,4)),".csv"),
row.names=FALSE, fileEncoding="CP949")
## 메모리에 올라와있는 변수를 지웁니다  그냥 메모리 관리 차원 하는 것 같습니다.
rm(list=str_sub(i,1,-5))
}
## RData 파일을 만들어서 저장합니다.
## save(객체, file= "파일경로") 로써 객체를 해당 파일경로에 저장 한다는 의미
save(bikeData, file="./dataSmpl/bikeData.RData")
# 빈값을 만든다.
bikeData <- vector(mode="list")
for(i in csvList) {
# assign : 메모리에 괄호의 내용을 등록한다.
# read.csv : csv 파일을 읽는다.
# paste0("1", "2") - 두개의 해당 문자를 붙여라  paste("1","2", sep="") 와 같은 기능을 합니다.
# str_sub(i,1,-5) : i값 인 파일명.확장자명 이 되어 있는 것을 첫번째 부터 끝의 -5 자리 까지
# 자른다.
# 이해가 안된다면 str_sub(csvList[1],1,-5) 하나하나 씩 실행 해보기.
assign(str_sub(i,1,-5), read.csv(paste0("./dataSmpl/",i),
stringsAsFactors=FALSE))
#  get : 위에서 assign을 통해 올라온 변수에 대해서 받겠다는 의미(16개)
# envir=enviroment() 는 현재 working directory의 변수모두를 가리킨다는 의미.
smplDummy <- get(str_sub(i,1,-5), envir=environment())
## cat : 문자열 붙이기 여기서 \n은 줄바꿈 문자를 의미
# 지금 상황에선 별기능이 없음
cat("\n",str_sub(i,1,-5),"\n","\n")
print(head(smplDummy))
# 이 부분은 파일의 길이를 좀 더 짧게 하기 위함인데
# 16개의 파일명을 확인해보면 Trips부터 뒷부분이 중복되기 때문에
# 중복되는 부분을 제외한 나머지의 이름을 합치는 역할을 합니다.
# 이 assign 을 수행하면 메모리에 Q12014 와 같은 변수가 올라갑니다.
assign(paste0(str_sub(i,6,7),str_sub(i,1,4)), smplDummy)
## bikeData List에 smplDummy 값을 넣습니다.
## index 형태는 위의 Q12014 와 같은 형태로 index가 됩니다.
bikeData[[paste0(str_sub(i,6,7),str_sub(i,1,4))]] <- smplDummy
## Q12014 , Q22014 와 같이 이름이 바뀐 값들을 csv 파일로 저장합니다.
## write.csv 함수의 설명은 강의자료를 참고하세요
write.csv(get(paste0(str_sub(i,6,7),str_sub(i,1,4)),envir=environment()),
file=paste0("./dataSmpl/",paste0(str_sub(i,6,7),str_sub(i,1,4)),".csv"),
row.names=FALSE, fileEncoding="CP949")
## 메모리에 올라와있는 변수를 지웁니다  그냥 메모리 관리 차원 하는 것 같습니다.
rm(list=str_sub(i,1,-5))
}
## RData 파일을 만들어서 저장합니다.
## save(객체, file= "파일경로") 로써 객체를 해당 파일경로에 저장 한다는 의미
save(bikeData, file="./dataSmpl/bikeData.RData")
View(smplDummy)
length(smplDummy)
nchar(smplDummy)
str(smplDummy)
dim(smplDummy)
length(bikeData)
dim(bikeData)
str(bikeData)
attributes(bikeData)
lapply(bikeData, head)
attributes(bikeData)
str(bikeData)
is.list(bikeData)
head(bikeData)
head(bikeData,6)
head(bikeData,20)
lapply(bikeData, head)
lapply(bikeData)
names(bikeData) ## 리스트의 이름(출력 시 $ 붙어있는 이름이라고 생각 하면 됨.: $Q42014)
length(bikeData)## 리스트의 길이
names(bikeData)[12:16]  ## 12번째 부터 16번째 까지 뽑아
View(`Q12011`)
lapply(bikeData, head)
names(bikeData) ## 리스트의 이름(출력 시 $ 붙어있는 이름이라고 생각 하면 됨.: $Q42014)
length(bikeData)## 리스트의 길이
names(bikeData)[12:16]  ## 12번째 부터 16번째 까지 뽑아
for (i in names(bikeData)[12:16]) {
## bikeData 에 컬럼 순서를 변경해서 넣습니다.
bikeData[[i]] <- bikeData[[i]][,c(1,2,4,3,5:7)]
print(names(bikeData[[i]]))
}
names(bikeData[["Q42010"]])
str(bikeData[["Q42014"]])
names(bikeData[["Q42014"]])
names(bikeData[["Q42010"]])
names(bikeData)
lapply(bikeData, dim) #리스트로 반환됨
sapply(bikeData, dim) #리스트로 반환됨.
is.list(sapply(bikeData, dim)) #리스트로 반환됨.
is.dataframe(sapply(bikeData, dim)) #리스트로 반환됨.
is.data.frame(sapply(bikeData, dim)) #리스트로 반환됨.
is.matrix(sapply(bikeData, dim)) #리스트로 반환됨.
lapply(bikeData, dim) #리스트로 반환됨
sapply(bikeData, dim) #매트릭스 형태로 출력됨.(row = 1500, col = 7)
names(bikeData)
lapply(bikeData, dim) #리스트로 반환됨
sapply(bikeData, dim) #매트릭스 형태로 출력됨.(row = 1500, col = 7)
names(bikeData[["Q42010"]])
str(bikeData[["Q42014"]])
bikeData[["Q42014"]]$Start.date <- gsub("-","/",bikeData[["Q42014"]]$Start.date)
bikeData[["Q42014"]]$End.date <- gsub("-","/",bikeData[["Q42014"]]$End.date)
lapply(bikeData, head)
for (i in names(bikeData)) {
names(bikeData[[i]]) <- names(bikeData[["Q42014"]])
print(names(bikeData[[i]]))
}
lapply(bikeData, head)
is.vactor(sapply(bikeData, dim)) #매트릭스 형태로 출력됨.(row = 1500, col = 7)
is.vector(sapply(bikeData, dim)) #매트릭스 형태로 출력됨.(row = 1500, col = 7)
is.array(sapply(bikeData, dim)) #매트릭스 형태로 출력됨.(row = 1500, col = 7)
bikeDataFull <- do.call("rbind", lapply(bikeData, as.data.frame))
lapply(bikeData, as.data.frame)
is.data.frame(lapply(bikeData, as.data.frame))
is.list(lapply(bikeData, as.data.frame))
lapply(bikeData, as.data.frame)
nrow(bikeData)
length(bikeData)
str(bikeData)
is.data.frame(bikeDataFull)
bikeDatafull <- rbind(lapply(bikeData, as.data.frame))
View(bikeDataFull)
bikeDataFull[[1]]
bikeDataFull[1]
bikeDataFull
nrow(bikeDataFull)
bikeDataFull <- do.call("rbind", lapply(bikeData, as.data.frame))
nrow(bikedataFull)
nrow(bikeDataFull)
bikeDataFull <- do.call("rbind", lapply(bikeData, as.data.frame))
bikeDataFull2 <- rbind(lapply(bikeData, as.data.frame)
bikeDataFull2
bikeDataFull2
bikeDataFull2 <- rbind(lapply(bikeData, as.data.frame)
bikeDataFull2
bikeDataFull2 <- rbind(lapply(bikeData, as.data.frame))
bikeDataFull2
bikeDataFull <- do.call("rbind", lapply(bikeData, as.data.frame))
bikeDataFull
bikeDataFull2 <- rbind(lapply(bikeData, as.data.frame))
bikeDataFull2
bikeDataFull <- do.call("rbind", lapply(bikeData, as.data.frame))
head(bikeDataFull)
tail(bikeDataFull)
system.time(
bikeDataFull$Start.date <- strptime(bikeDataFull$Start.date, format="%m/%d/%Y %H:%M")
)
bikeDataFull$Start.date
bikeDataFull$End.date <- strptime(bikeDataFull$End.date, format="%m/%d/%Y %H:%M")
str(bikeDataFull)
bikeDataFull$Start.date
bikeDataFull$End.date
is.list(bikeDataFull$Start.date)
bikeDataFull$Start.date
View(bikeDatafull)
View(bikeDataFull$Start.date)
unclass(bikeDataFull$Start.date[1])
class(bikeDataFull$Start.date[1])
unclass(bikeDataFull$Start.date[1])
class(bikeDataFull$Start.date[1])
bikeDataFull$ride.time <- as.numeric((bikeDataFull$End.date - bikeDataFull$Start.date)/60)
bikeDataFull
View(bikeDataFull)
bikeDataFull[,"ride.wday"] <- bikeDataFull$Start.date$wday
View(bikeDatafull)
View(bikeDataFull)
bikeDataFull$hour <- bikeDataFull$Start.date$hour
str(bikeDataFull)
str(bikeDataFull$hour)
bikeDataFull$ride.wday <- factor(bikeDataFull$ride.wday, levels=c(1:6,0), ordered=T,
labels=c("월","화","수","목","금","토","일"))
head(bikeDataFull)
as.factor(bikeDataFull$Subscription.Type)
bikeDataFull$Subscription.Type <- as.factor(bikeDataFull$Subscription.Type)
levels(bikeDataFull$Subscription.Type)
table(bikeDataFull$Subscription.Type)
bikeDataFull$Bike. <- as.factor(bikeDataFull$Bike.)
as.factor(bikeDataFull$Bike.)
str(bikeDataFull)
wdayStat <- aggregate(bikeDataFull$ride.time, by=list(wday=bikeDataFull$ride.wday), FUN=mean)
wdayStat
barplot(wdayStat$x, names.arg = wdayStat$wday)
wdayStat2 <- aggregate(bikeDataFull$ride.time, by=list(wday=bikeDataFull$ride.wday), FUN=length)
wdayStat2
wdayStat3 <- aggregate(bikeDataFull$ride.time,
by=list(bikeNo=bikeDataFull$Bike.,
wday=bikeDataFull$ride.wday),
FUN=length)
head(wdayStat3);tail(wdayStat3)
tail(wdayStat3)
head(wdayStat3);
wdayStat4 <- aggregate(bikeDataFull$ride.time,
by=list(bikeNo=bikeDataFull$Bike.,
wday=bikeDataFull$ride.wday),
FUN=sum)
head(wdayStat4);
tail(wdayStat4)
library(reshape)
?reshape
?cast
wdayStat4Cast <- cast(wdayStat4, bikeNo ~ wday, value="x", fun.aggregate=sum)
summary(wdayStat4Cast)
head(wdayStat4Cast);tail(wdayStat4Cast)
wdayStat4Cast$timeSum <- apply(wdayStat4Cast[,2:8],1,sum)
head(wdayStat4Cast);tail(wdayStat4Cast)
wdayStat4Cast$timeSum <- apply(wdayStat4Cast[,1:8],1,sum)
head(wdayStat4Cast);tail(wdayStat4Cast)
wdayStat4Cast$timeSum <- apply(wdayStat4Cast[,2:8],1,sum)
head(wdayStat4Cast);tail(wdayStat4Cast)
timeSumOrder <- order(wdayStat4Cast$timeSum, decreasing = TRUE)
timeSumOrder
wdayStat4Cast <- wdayStat4Cast[timeSumOrder,]
head(wdayStat4Cast);
tail(wdayStat4Cast)
wdayStat4Cast$timeSum <- apply(wdayStat4Cast[,2:8],1,sum)
head(wdayStat4Cast);
tail(wdayStat4Cast)
timeSumOrder <- order(wdayStat4Cast$timeSum, decreasing = TRUE)
wdayStat4Cast <- wdayStat4Cast[timeSumOrder,]
head(wdayStat4Cast);
tail(wdayStat4Cast)
bikeStat <- aggregate(bikeDataFull$ride.time,
by=list(bikeNo=bikeDataFull$Bike.),
FUN=length)
names(bikeStat) <- c("bikeNo","NumOfRiders")
head(bikeStat);tail(bikeStat)
library(plyr)
wdayStat4CastJoin <- join(wdayStat4Cast, bikeStat, by = "bikeNo")
head(wdayStat4CastJoin);tail(wdayStat4CastJoin)
bikeStat <- aggregate(bikeDataFull$ride.time,
by=list(bikeNo=bikeDataFull$Bike.),
FUN=length)
names(bikeStat)
names(bikeStat) <- c("bikeNo","NumOfRiders")
hourStat <- aggregate(bikeDataFull$ride.time,
by=list(hour=bikeDataFull$hour),
FUN=length)
plot(hourStat, type="l")
typeStat <- aggregate(bikeDataFull$ride.time,
by=list(userType=bikeDataFull$Subscription.Type,
hour=bikeDataFull$hour),
FUN=length)
typeStat
plot(typeStat[typeStat$userType=="Casual",2:3], type="l", ylab="시간대별 이용자")
plot(typeStat[typeStat$userType=="Subscriber",2:3], type="l", ylab="시간대별 이용자")
plot(typeStat[typeStat$userType=="Registered",2:3], type="l", ylab="시간대별 이용자")
typeStat2 <- aggregate(bikeDataFull$ride.time,
by=list(userType=bikeDataFull$Subscription.Type,
hour=bikeDataFull$hour),
FUN=mean)
attributes(typeStat2)
plot(typeStat2[typeStat$userType=="Casual",2:3], type="l", ylab="시간대별 평균 이용시간")
plot(typeStat2[typeStat$userType=="Subscriber",2:3], type="l", ylab="시간대별 평균 이용시간")
plot(typeStat2[typeStat$userType=="Registered",2:3], type="l", ylab="시간대별 평균 이용시간")
plot(typeStat2[typeStat$userType=="Casual",2:3], type="l", ylab="시간대별 평균 이용시간")
plot(typeStat2[typeStat$userType=="Subscriber",2:3], type="l", ylab="시간대별 평균 이용시간")
plot(typeStat2[typeStat$userType=="Registered",2:3], type="l", ylab="시간대별 평균 이용시간")
typeStat3 <- tapply(bikeDataFull$ride.time, bikeDataFull$Subscription.Type, mean, na.rm=T)
typeStat3 <- tapply(bikeDataFull$ride.time, bikeDataFull$Subscription.Type, mean, na.rm=T)
typeStat3
attributes(typeStat3)
dim(typeStat3)
str(typeStat3)
typeStat4 <- tapply(bikeDataFull$ride.time, list(userType=bikeDataFull$Subscription.Type,
wDay=bikeDataFull$ride.wday), mean, na.rm=T)
attributes(typeStat4)
x <- 1;
y <- 2;
func <- function(x, y) {
return x,y
}
func <- function(x, y) {
return x
}
func <- function(x, y) {
return x;
}
func <- function(x, y) {
return x,y;
}
func <- function(x, y) {
return x;
}
func <- function(x, y) {
return x;
}
func <- function(x, y) {
return x
}
func <- function(x, y) {
return x
}
func <- function(x, y) {
return(x,y)
}
func
func
z <- 0
d <- 0
z <- func(x,y)
z,d <- func(x,y)
d <- 0
z,d <- func(x,y)
z <- 0
d <- 0
z,d <- func(x,y)
attributes(typeStat4)
plot(typeStat2[typeStat$userType=="Casual",2:3], type="l", ylab="시간대별 평균 이용시간")
plot(typeStat2[typeStat$userType=="Subscriber",2:3], type="l", ylab="시간대별 평균 이용시간")
plot(typeStat2[typeStat$userType=="Registered",2:3], type="l", ylab="시간대별 평균 이용시간")
sapply(bikeData, dim) #매트릭스 또는 array   형태로 출력됨.(row = 1500, col = 7)
plot(hourStat, type="l")
trainData <- read.csv("C:/Users/leejh/Documents/R/20150502_R/data/trainData.csv", stringsAsFactors=FALSE, na.strings="NA")
trainData$dateChar <- strptime(x=trainData$dateChar, format="%Y/%m%d")
trainData$timeChar <- gsub("-", ":", trainData$timeChar)
strptime(x=trainData$timeChar, format="%H:%M:%S")
trainData$useDate <- paste(trainData$dateChar, trainData$timeChar, sep=" ")
view(trainData)
View(trainData)
trainData$useDate <- strptime(trainData$useDate, format="%Y/%m/%d %H:%M:%S")
trainData$useDate
trainData$useDate <- paste(trainData$dateChar, trainData$timeChar, sep=" ")
View(trainData)
aggregate(trainData$city, by=list(trainData$nation), FUN=length)
aggregate(trainData$city="Seoul", by=list(trainData$nation), FUN=length)
aggregate(trainData$city, by=list(trainData$nation), FUN=length)
View(trainData)
as.numeric("1713")
strptime(x=as.numeric("1713"), format="%H:%M")
strptime(x=as.numeric("1713"), format="%H%M")
strptime(x=as.numeric("1713"), format="%H%M%S")
strptime(x=as.numeric("1713"), format="%H%M:%S")
aggregate(trainData$city, by=list(trainData$touristID), FUN=length)
aggregate(trainData$dateChar, by=list(trainData$touristID), FUN=length)
View(trainData)
trainData$dateChar <- strptime(x=trainData$dateChar, format="%Y/%m%d")
trainData <- read.csv("C:/Users/leejh/Documents/R/20150502_R/data/trainData.csv", stringsAsFactors=FALSE, na.strings="NA")
trainData$dateChar <- strptime(x=trainData$dateChar, format="%Y/%m%d")
strptime(x=trainData$timeChar, format="%H:%M:%S")
trainData$timeChar <- gsub("-", ":", trainData$timeChar)
View(trainData)
by=list(userType=bikeDataFull$Subscription.Type,
strptime(x=trainData$timeChar, format="%m/%d/%Y %H:%M")
)
strptime(x=trainData$timeChar, format="%m/%d/%Y %H:%M")
strptime(x=trainData$timeChar, format="%Y/%M/%D %H:%M")
strptime(x=trainData$timeChar, format="%Y/%m/%d %H:%M")
strptime(x=trainData$timeChar, format="%Y/%m/%d %H%M")
strptime(x="170303", format="%Y/%m/%d %H%M")
strptime(x="170303", format="%H%M")
strptime(x="170303", format="%H%M%s")
strptime(x="170303", format="%H%M%S")
trainData$timeChar <- gsub(":", "", trainData$timeChar)
trainData$timeChar <- strptime(x=trainData$timeChar, format="%H%M%S")
trainData$timeChar
trainData$timeChar
```{r}
View(trainData)
trainData$timeChar <- strptime(x=trainData$timeChar, format="%H:%M:%S")
trainData$timeChar
trainData$timeChar <- strptime(x=trainData$timeChar, format="%H%M%S")
trainData$timeChar <- strptime(x=trainData$timeChar, format="%H:%M:%S")
trainData$dateChar <- strptime(x=trainData$dateChar, format="%Y/%m%d")
trainData$timeChar <- gsub(":", "", trainData$timeChar)
trainData$timeChar <- strptime(x=trainData$timeChar, format="%H%M%S")
trainData$timeChar <- gsub(":", "", trainData$timeChar)
trainData$timeChar <- strptime(x=trainData$timeChar, format="%H:%M:%S")
View(trainData)
trainData <- read.csv("C:/Users/leejh/Documents/R/20150502_R/data/trainData.csv", stringsAsFactors=FALSE, na.strings="NA")
trainData$dateChar <- strptime(x=trainData$dateChar, format="%Y/%m%d")
trainData$timeChar <- gsub(":", "", trainData$timeChar)
strptime(x=trainData$timeChar, format="%H:%M:%S")
