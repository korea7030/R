# install.packages("plyr")
library(plyr)
# install.packages("dplyr")
library(dplyr)
################################################ 전처리 ##############################################################
csvList <- dir("./dataAll/")
csvList

# Data 받아오기
for (i in seq_along(csvList)) {
  assign(paste0("bikeData_",i), read.csv(paste0("./dataAll/", csvList[i]), stringsAsFactors = FALSE))
}

# column 확인
for (j in c(1:22)) {
  cat(paste0("bikeData_",j), ":" , names(get(paste0("bikeData_",j))),"\n")
}

################################################## 1~12 는 컬럼 공통화 처리 ##########################################
colnames(bikeData_1) <- c("Duration", "Start.date", "End.date", "Start.station", "End.station", "Bike.", "Subscription.Type")
colnames(bikeData_2) <- c("Duration", "Start.date", "End.date", "Start.station", "End.station", "Bike.", "Subscription.Type")
colnames(bikeData_3) <- c("Duration", "Start.date", "End.date", "Start.station", "End.station", "Bike.", "Subscription.Type")
colnames(bikeData_4) <- c("Duration", "Start.date", "End.date", "Start.station", "End.station", "Bike.", "Subscription.Type")
colnames(bikeData_5) <- c("Duration", "Start.date", "End.date", "Start.station", "End.station", "Bike.", "Subscription.Type")
colnames(bikeData_6) <- c("Duration", "Start.date", "End.date", "Start.station", "End.station", "Bike.", "Subscription.Type")
colnames(bikeData_7) <- c("Duration", "Start.date", "End.date", "Start.station", "End.station", "Bike.", "Subscription.Type")
colnames(bikeData_8) <- c("Duration", "Start.date", "End.date", "Start.station", "End.station", "Bike.", "Subscription.Type")
colnames(bikeData_9) <- c("Duration", "Start.date", "End.date", "Start.station", "End.station", "Bike.", "Subscription.Type")
colnames(bikeData_10) <- c("Duration", "Start.date", "End.date", "Start.station", "End.station", "Bike.", "Subscription.Type")
colnames(bikeData_11) <- c("Duration", "Start.date", "End.date", "Start.station", "End.station", "Bike.", "Subscription.Type")
colnames(bikeData_12) <- c("Duration", "Start.date", "End.date", "Start.station", "End.station", "Bike.", "Subscription.Type")
################################################## 1~12 는 컬럼 공통화 처리 끝 ##########################################

############################## 13~17은 컬럼위치 변경 먼저 한 후에 공통 컬럼화 함 ####################################
bikeData_13 <- bikeData_13[,c("Duration", "Start.date", "End.date", "Start.Station", "End.Station", "Bike.", "Subscription.Type")]
bikeData_14 <- bikeData_14[,c("Duration", "Start.date", "End.date", "Start.Station", "End.Station", "Bike.", "Member.Type")]
bikeData_15 <- bikeData_15[,c("Duration", "Start.date", "End.date", "Start.Station", "End.Station", "Bike.", "Subscriber.Type")]
bikeData_16 <- bikeData_16[,c("Duration", "Start.date", "End.date", "Start.Station", "End.Station", "Bike.", "Subscription.Type")]
bikeData_17 <- bikeData_17[,c("Duration", "Start.date", "End.date", "Start.Station", "End.Station", "Bike.", "Subscription.Type")]
bikeData_18 <- bikeData_18[,c("Total.duration..ms.", "Start.date", "End.date", "Start.station", "End.station", "Bike.number", "Subscription.Type")]
bikeData_19 <- bikeData_19[,c("Duration..ms.", "Start.date", "End.date", "Start.station", "End.station", "Bike.number", "Subscription.type")]

colnames(bikeData_13) <- c("Duration", "Start.date", "End.date", "Start.station", "End.station", "Bike.", "Subscription.Type")
colnames(bikeData_14) <- c("Duration", "Start.date", "End.date", "Start.station", "End.station", "Bike.", "Subscription.Type")
colnames(bikeData_15) <- c("Duration", "Start.date", "End.date", "Start.station", "End.station", "Bike.", "Subscription.Type")
colnames(bikeData_16) <- c("Duration", "Start.date", "End.date", "Start.station", "End.station", "Bike.", "Subscription.Type")
colnames(bikeData_17) <- c("Duration", "Start.date", "End.date", "Start.station", "End.station", "Bike.", "Subscription.Type")
colnames(bikeData_18) <- c("Duration", "Start.date", "End.date", "Start.station", "End.station", "Bike.", "Subscription.Type")
colnames(bikeData_19) <- c("Duration", "Start.date", "End.date", "Start.station", "End.station", "Bike.", "Subscription.Type")
############################## 13~17은 컬럼위치 변경 먼저 한 후에 공통 컬럼화 함 끝 ####################################
head(bikeData_19)

############################## 20~22 공통 컬럼화 ####################################################################
colnames(bikeData_20) <- c("Duration","Start.date","End.date","Start.station.number","Start.station","End.station.number","End.station","Bike.","Subscription.Type")
colnames(bikeData_21) <- c("Duration","Start.date","End.date","Start.station.number","Start.station","End.station.number","End.station","Bike.","Subscription.Type")
colnames(bikeData_22) <- c("Duration","Start.date","End.date","Start.station.number","Start.station","End.station.number","End.station","Bike.","Subscription.Type")
############################## 20~22 공통 컬럼화 끝 ####################################################################

########################################## 17 데이터는 날짜 형태 변환 필요 ###########################################
bikeData_17$Start.date <- gsub("-","/",bikeData_17$Start.date)
bikeData_17$End.date <- gsub("-","/",bikeData_17$End.date)

bikeData_17$Start.date <- paste0(substr(bikeData_17$Start.date,6,7),"/",substr(bikeData_17$Start.date,9,10),"/",substr(bikeData_17$Start.date,1,4),substr(bikeData_17$Start.date,11, length(bikeData_17$Start.date)))
bikeData_17$End.date <- paste0(substr(bikeData_17$End.date,6,7),"/",substr(bikeData_17$End.date,9,10),"/",substr(bikeData_17$End.date,1,4),substr(bikeData_17$End.date,11, length(bikeData_17$End.date)))
########################################## 17 데이터는 날짜 형태 변환 필요 끝###########################################

########################################## 합치기 및 Duration 컬럼 구하기 ############################################
bikeData_group1 <- rbind(bikeData_1,bikeData_2,bikeData_3,bikeData_4,bikeData_5,bikeData_6,bikeData_7,bikeData_8,bikeData_9,bikeData_10, bikeData_11, bikeData_12,bikeData_13,bikeData_14,bikeData_15,bikeData_16,bikeData_17,bikeData_18,bikeData_19)
bikeData_ggoup2 <- rbind(bikeData_20, bikeData_21, bikeData_22)

bikeDataFull <- rbind.fill(bikeData_group1[c("Duration", "Start.date", "End.date", "Start.station", "End.station", "Bike.", "Subscription.Type") ], bikeData_ggoup2[c("Duration", "Start.date", "End.date", "Start.station", "End.station", "Bike.", "Subscription.Type")])

head(bikeDataFull)
bikeDataFull <- bikeDataFull[,-1]

bikeDataFull$Start.date <- strptime(bikeDataFull$Start.date, format="%m/%d/%Y %H:%M")
bikeDataFull$End.date <- strptime(bikeDataFull$End.date, format="%m/%d/%Y %H:%M")

save(bikeDataFull, file="bikeDataFull.RData")
rm(list=ls())

load(file = "bikeDataFull.RData", .GlobalEnv)

head((as.numeric(as.POSIXct(bikeDataFull$End.date)) - 
        as.numeric(as.POSIXct(bikeDataFull$Start.date)))/60/60)
## 메모리 에러
bikeDataFull$Duration <- (as.numeric(as.POSIXct(bikeDataFull$End.date)) - 
                            as.numeric(as.POSIXct(bikeDataFull$Start.date)))/60/60
########################################## 합치기 및 Duration 컬럼 구하기 끝############################################

############################################ 전처리 끝 ################################################################

############################################ 데이터 탐색 및 분석을 위한 처리 #########################################
## 이용 시작 요일 구하기 
bikeDataFull[,"ride_wday"] <- bikeDataFull$Start.date$wday
bikeDataFull$ride_wday <- factor(bikeDataFull$ride_wday, levels=c(1:6,0), ordered=T,
                                 labels=c("월","화","수","목","금","토","일"))

summary(bikeDataFull$Duration)

## 이용 시작 시간 구하기 
bikeDataFull$hour <- bikeDataFull$Start.date$hour

## Subscription.Type을 factor 형태로 변경
bikeDataFull$Subscription.Type <- as.factor(bikeDataFull$Subscription.Type)

## Subscription.Type 별 빈도수 
table(bikeDataFull$Subscription.Type)

######### data aggreate ############
summary(bikeDataFull)
## 요일별 평균 사용 시간
wdayStat <- aggregate(bikeDataFull$Duration, by=list(wday=bikeDataFull$ride_wday), FUN=mean)
wdayStat

## 그래프 확인
barplot(wdayStat$x, names.arg = wdayStat$wday)

## 요일별 사용 시간이 긴 요일은?
wdayStat2 <- aggregate(bikeDataFull$Duration, by=list(wday=bikeDataFull$ride_wday), FUN=length)
wdayStat2

## 자전거 번호와 자전거 사용 요일을 기준으로 사용시간의 길이를 집계
wdayStat3 <- aggregate(bikeDataFull$Duration, 
                       by=list(bikeNo=bikeDataFull$Bike.,
                               wday=bikeDataFull$ride_wday), 
                       FUN=length)

head(wdayStat3);tail(wdayStat3)

## 자전거의 번호와 자전거 사용 요일을 기준으로 사용시간의 합계를 집계
wdayStat4 <- aggregate(bikeDataFull$Duration, 
                       by=list(bikeNo=bikeDataFull$Bike.,
                               wday=bikeDataFull$ride_wday), 
                       FUN=sum)

head(wdayStat4);tail(wdayStat4)

# install.packages("reshape")
library(reshape)

## 사용시간 합계를 자전거 번호, 요일 별의 합계로 데이터를 변경해서 저장
wdayStat4Cast <- cast(wdayStat4, bikeNo ~ wday, value="x", fun.aggregate=sum) 
summary(wdayStat4Cast)
head(wdayStat4Cast);tail(wdayStat4Cast)

## wdayStat4Cast의 요일별 시간합계(sum)을 행의 형태로 wdayStat4Cast에 적용
wdayStat4Cast$timeSum <- apply(wdayStat4Cast[,2:8],1,sum)
head(wdayStat4Cast);tail(wdayStat4Cast)

## 사용시간 합계를 오름차운스로 정렬
timeSumOrder <- order(wdayStat4Cast$timeSum, decreasing = TRUE)
wdayStat4Cast <- wdayStat4Cast[timeSumOrder,]

head(wdayStat4Cast);tail(wdayStat4Cast)

## 자전거 번호 별 사용 시간의 길이 집계
bikeStat <- aggregate(bikeDataFull$Duration, 
                      by=list(bikeNo=bikeDataFull$Bike.), 
                      FUN=length)
names(bikeStat) <- c("bikeNo","NumOfRiders")
head(bikeStat);tail(bikeStat)

## 자전거의 사용시간합계 데이터에 자전거 사용자 수를 구한 값을 합침
wdayStat4CastJoin <- join(wdayStat4Cast, bikeStat, by = "bikeNo")
head(wdayStat4CastJoin);tail(wdayStat4CastJoin)

## 시간 별 자전거 사용시간을 나타내라
hourStat <- aggregate(bikeDataFull$Duration, 
                      by=list(hour=bikeDataFull$hour), 
                      FUN=length)

plot(hourStat, type="l")

## 사용자 유형, 시간 별 사용시간을 나타내라
typeStat <- aggregate(bikeDataFull$Duration, 
                      by=list(userType=bikeDataFull$Subscription.Type,
                              hour=bikeDataFull$hour), 
                      FUN=length)
typeStat

## 각각 사용자 유형별 시간대 이용자
plot(typeStat[typeStat$userType=="Casual",2:3], type="l", ylab="시간대별 이용자")
plot(typeStat[typeStat$userType=="Subscriber",2:3], type="l", ylab="시간대별 이용자")
plot(typeStat[typeStat$userType=="Registered",2:3], type="l", ylab="시간대별 이용자")

## 사용자 유형, 시간 별 사용시간의 평균을 구하라
typeStat2 <- aggregate(bikeDataFull$Duration, 
                       by=list(userType=bikeDataFull$Subscription.Type,
                               hour=bikeDataFull$hour), 
                       FUN=mean)

## 각 사용자 유형별 시간대 평균 이용시간
plot(typeStat2[typeStat$userType=="Casual",2:3], type="l", ylab="시간대별 평균 이용시간")
plot(typeStat2[typeStat$userType=="Subscriber",2:3], type="l", ylab="시간대별 평균 이용시간")
plot(typeStat2[typeStat$userType=="Registered",2:3], type="l", ylab="시간대별 평균 이용시간")

## tapply(data, index(factor 값), 함수명, na.rm=T)
## 이 말은 data를 index 값 즉 factor값으로 그룹화하여 함수명을 수행합니다. 
## 여기서 na.rm=T 는 NA값을 지우는걸 허용 한다는 의미입니다. 

## 사용 시간을 subscription.Type 별로 그룹화하여 평균을 구한다. 
typeStat3 <- tapply(bikeDataFull$Duration, bikeDataFull$Subscription.Type, mean, na.rm=T)
typeStat3

## 사용시간을 subscriptionType과 요일별로 그룹화하여 평균을 구하라
typeStat4 <- tapply(bikeDataFull$Duration, list(userType=bikeDataFull$Subscription.Type,
                                                 wDay=bikeDataFull$ride_wday), mean, na.rm=T)
typeStat4
############################################ 데이터 탐색 및 분석을 위한 처리 끝#########################################