{
    "contents" : "rm(list=ls())\nlibrary(dplyr)\n## data loading \ncustomerDb <- read.csv(\"customerDb.csv\", stringsAsFactors=F)\nhead(customerDb)\n## 고객아이디, 성별, 나이, 사는도시\n\nbasketData <- read.csv(\"basketData.csv\", stringsAsFactors=F)\nhead(basketData)\n## 고객아이디, 주문번호, 지점아이디, 사용일자, 사용시간, 카테고리, 카테고리별분류, 구매개수, 금액\n\n## 1. 가장 소비를 많이하는 고객Id는?\n# custId별로 정렬\ncostcust <- group_by(basketData, custId)\nhead(costcust)\n\n# amount(금액)의 합계로 symmarize \nloyalCustomer <- summarize(costcust, sumAmount = sum(amount))\n\n# amount(금액)의 합계 내림차순으로 arrange\nloyalCustomer <- arrange(loyalCustomer, desc(sumAmount))\n\nhead(loyalCustomer)\n## C0689 고객이 가장 소비를 많이 한다. \n###################################\n\n## 2. 가장 매출이 많은 branch는?\nhead(basketData)\n# branchId별로 정렬 \nbranchData <- group_by(basketData, branchId)\n\n# amount(금액)의 합계로 summarize\nloyalBranch <- summarize(branchData, sumAmount = sum(amount))\n# amount(금액)의 합계 내림차순으로 arrange\nloyalBranch <- arrange(loyalBranch, desc(sumAmount))\n\nhead(loyalBranch)\n## branch_03지점의 매출이 가장 많다.\n################################\n\n## RFM분석\n## Recency- 거래의 최근성: 고객이 얼마나 최근에 구입했는가?\n## Frequency- 거래빈도: 고객이 얼마나 빈번하게 우리 상품을 구입했나?\n## Monetary- 거래규모: 고객이 구입했던 총 금액은 어느 정도인가?.\n\nbasketData$date <- as.Date(as.character(basketData$date), format=\"%Y%m%d\")\n## 크기를 비교하기위해 다시 숫자로\nbasketData$date <- as.numeric(basketData$date)\n# basketData와 customerDb left_join \n# left_join(조인당할 대상, 조인할 대상): left_join이니 왼쪽으로 join 시킨다라는 의미\nbasketCustom <- left_join(basketData, customerDb)\nhead(basketCustom)\n# basketCustom을 custId와 date로 group_by \ngroupbyDummy <- group_by(basketCustom, custId, date)\nhead(groupbyDummy)\n\n## 날짜별 고객 사용빈도 현황\nuserFreq <- summarize(groupbyDummy, N=n())\nhead(userFreq)\n\n## 고객별 마트이용횟수\nuserF <- summarize(userFreq, frequency=n())\nuserF\n\ngroupbyDummy <- group_by(basketCustom, custId)\nhead(groupbyDummy)\n\n## 마트사용량을 기간별로 나타내라 . \nuserRFM <- summarize(groupbyDummy, \n                     minRecency=min(date), # 최초방문일? \n                     recency=max(date), # 최근방문일\n                     momentary=sum(amount),  # 거래규모\n                     period=max(date)-min(date)) # 기간(최초방문일 - 최근방문일)\n\nuserRFM\n# 기간별 마트사용량과 고객별 마트이용횟수 left_join\nuserRFM <- left_join(userRFM, userF)\n\nhead(userRFM)\n\n## 마트사용금액합계별로 내림차순\narrange(userRFM, desc(momentary))\n\n## 최초방문일, 최근방문일을 date형으로 나타내기 위해 추가\nuserRFM$minDate <- as.Date(userRFM$minRecency, origin=\"1970-01-01\")\nuserRFM$maxDate <- as.Date(userRFM$recency, origin=\"1970-01-01\")\n\n## 히스토그램\nhist(userRFM$maxDate, breaks=10)\n\nstr(userRFM)\n## userRFM중에 maxDate가 중복이 아닌 전체길이\nlength(unique(userRFM$maxDate))\n## 거래규모 히스토그램 \nhist(userRFM$momentary, breaks=100)\nrange(userRFM$momentary)\n\n## 마트를 가장많이 사용하는 날짜 \nplot(table(userRFM$maxDate), main=\"Guests Recency\")\n\n## 마트를 사용하는 손님 빈도수 \nplot(table(userRFM$frequency), main=\"Guests Frequency\")\n\n# 거래규모에 대한  사분위수를 따로 구한다. \nquantile(userRFM$momentary, c(0.2, 0.4, 0.6, 0.8))\n\n# 최근방문일을 분위수로 계산 \nquantile(as.numeric(userRFM$maxDate), c(0.2,0.4,0.6,0.8,0.9))\n\n# RFM별로 상위 20%가 차지하는 총 매출액 대비 비중을 구한다. \n## userRFM$momentary > quantile(userRFM$momentary, 0.8) : 거래규모가 0.8 보다 큰 즉, 상위 20%를 차지하는 비율\n## 에 대한 momentary의 합계를 sumM으로 구해라 \nsumM <- sum(userRFM$momentary[userRFM$momentary > quantile(userRFM$momentary, 0.8)])\n\n# 위의 구한 비중에 대한 전체거래규모 비율(거래규모 상위 20%의 합계 / 전체 거래규모합계)\nsumM/sum(userRFM$momentary) ## 약 65%로 가장크다 \n\n## 빈도수 \nsumF <- sum(userRFM$frequency[userRFM$frequency > quantile(userRFM$frequency, 0.8)])\n## 전체빈도수에서 위의 빈도수에 대한 비율 \nsumF/sum(userRFM$frequency) ## 59%로 중간수준이다. \n\nas.Date(quantile(userRFM$recency,0.8), origin=\"1970-01-01\")\nhead(as.numeric(userRFM$maxDate))\nstr(userRFM)\n\n## 최근방문일의 20%에 대한 거래규모 합계\nsumR <- sum(userRFM$momentary[userRFM$recency > quantile(userRFM$recency, 0.8)])\nsumR/sum(userRFM$momentary) # 43%로 가장 적다.\n\n## R, F , M 별로 비율구하기\nweightR <- sumR/(sumR+sumF+sumM)\nweightF <- sumF/(sumR+sumF+sumM)\nweightM <- sumM/(sumR+sumF+sumM)\n\n## RFM 지수 = weightR * Recency 점수 + weightF * Frequency점수 + weightM * Monetary 점수\nquantM <- quantile(userRFM$momentary, c(0,0.2,0.4,0.6, 0.8, 1))\nquantR <- as.Date(quantile(as.numeric(userRFM$maxDate), c(0,0.2,0.4,0.6,0.8,1)), origin=\"1970-01-01\")\nquantF <- quantile(userRFM$frequency, c(0,0.2,0.4,0.6,0.8,1))\n\n?parse\nColumnName <- paste0(\"userRFM\",\"$\",\"frequency\")\n# 문자열조합으로 데이터프레임의 열을 찾는 방법\neval(parse(text=ColumnName))[2] \n## userRFM$frequency[2] 와 같다. \n\nhead(userRFM$frequency)\n# userRFM의 maxDate, frequency, momentary 별 quantR, quantF, quantM 을 활용해 R,F,M 점수를 지정하는 함수\n\n# 등급을 숫자로 나타내기\n# parameter : 등급을 나타낼 데이터, 데이터명, RFM명, 분위수데이터\nintervalGrade <- function(mainData, fileName, rfmName, quantileData) {\n  forLength <- dim(mainData)[1]\n  \n  results <- rep(0, forLength) # 0을 mainData의 길이만큼 0으로 미리 채워둠\n  \n  for(i in 1:forLength) {\n    data <- eval(parse(text=paste0(fileName,\"$\",rfmName)))[i]\n    \n    if(data >= quantileData[1] && data < quantileData[2]) {\n      results[i] <- 1\n    }else if(data >= quantileData[2] && data < quantileData[3]) {\n      results[i] <-2\n    }else if(data >= quantileData[3] && data < quantileData[4]) {\n      results[i] <-3\n    }else if(data >= quantileData[4] && data < quantileData[5]) {\n      results[i] <- 4\n    }else { results[i] <- 5}\n  }\n  \n  return(results)\n  print(results)\n}\n\nuserRFM$R <- intervalGrade(userRFM, \"userRFM\", \"maxDate\", quantR )\nuserRFM$F <- intervalGrade(userRFM, \"userRFM\", \"frequency\", quantF )\nuserRFM$M <- intervalGrade(userRFM, \"userRFM\", \"momentary\", quantM )\n\nhead(userRFM)\n\nuserRFM$score <- (weightR * userRFM$R + weightF*userRFM$F + weightM*userRFM$M) * 100/5\nhist(userRFM$score)\n\n# 스코어에 대한 분위수\n(quantS <- quantile(userRFM$score,c(0,0.2,0.4,0.6,0.8,1)))\n\n# userRFM에 대한 score점수를 quantS를 통해 점수등급을 구하는 함수\n# parameter : 등급구할 데이터, 데이터파일명, RFM명, 분위수데이터\nfinalGrade <- function(mainData, fileName, rfmName, quantileData) {\n  \n  forLength <- dim(mainData)[1]\n  \n  results <- rep(0, forLength)\n  \n  \n  for (i in 1:forLength) {\n    \n    data <- eval(parse(text=paste0(fileName,\"$\",rfmName)))[i]\n    \n    if (data >= quantileData[1] && data < quantileData[2] ) {\n      results[i] <- \"E\"\n    } else if (data >= quantileData[2] && data < quantileData[3]) {\n      results[i] <- \"D\"\n    } else if (data >= quantileData[3] && data < quantileData[4]) {\n      results[i] <- \"C\"\n    } else if (data >= quantileData[4] && data < quantileData[5]) {\n      results[i] <- \"B\"\n    } else { results[i] <- \"A\" }\n  }\n  \n  return(results)\n}\n\nuserRFM$grade <- finalGrade(userRFM, \"userRFM\", \"score\", quantS)\nhead(as.data.frame(userRFM))\n\nstr(userRFM)\n\nuserRFM <- arrange(userRFM, desc(grade))\n\nhead(userRFM)\n\n############### Chain rule 관련 연습. \nhead(basketData)\nunique(basketData$branchId)\nfilterDummy <- filter(basketData, branchId == \"branch_01\")\ngroupbyDummy <- group_by(filterDummy, custId, date)\nsummarizeDummy <- summarize(groupbyDummy, frequency=n(), monetary=sum(amount))\nsummarizeDummy\nfrequencyDummy <- summarize(summarizeDummy, frequency=n())\nfrequencyDummy\n\nbasketData %>% \n  filter(branchId == \"branch_01\") %>%\n  group_by(custId, date) %>%\n  summarize(frequency=n(), monetary=sum(amount)) %>%\n  summarize(frequency=n())\n\nfrequencyDummy <- basketData %>% \n  filter(branchId == \"branch_02\") %>%\n  group_by(custId, date) %>%\n  summarize(frequency=n(), monetary=sum(amount)) %>%\n  summarize(frequency=n())\nfrequencyDummy\n############################################################\n\n############# ploting \nlibrary(reshape)\nlibrary(dplyr)\nhead(basketData)\nnames(basketData)\nhead(names(basketData[,-c(1)])\n\ntblgrade <- table(userRFM$grade)\nplot(tblgrade)\nplot(tblgrade, type=\"l\")\ntitle(main=\"My first plot image\")\n\nplot(tblgrade, type=\"l\", xaxt=\"n\", ylab=\"\")\ntitle(main=\"My second plot image\")\n\naxis(1, at=1:length(tblgrade), label=c(\"최우수고객\",\"우수고객\",\"보통고객\",\"평균고객\",\"불만고객\"))\ntitle(xlab=\"고객구분\", col.lab=\"red\")\ntitle(ylab=\"고객수\",  col.lab=\"blue\")\n\nuserRFM$gradeFac <- factor(userRFM$grade, levels=c(\"A\",\"B\",\"C\",\"D\",\"E\"), ordered=T)\nboxplot(userRFM$score~userRFM$gradeFac)\nboxplot(userRFM$score~userRFM$grade, notch=T, col=c(\"red\",\"blue\", rep(\"black\",3)))\n\nuserRFM <- data.frame(userRFM)\n\n## basketData에 userRFM의 custid, grade를 leftjoin \nbasketGrade <- left_join(basketData, userRFM[,c(\"custId\",\"grade\")])\nhead(basketGrade)\n\ngraphOut <- basketGrade %>% \n            group_by(grade, custId, branchId) %>%\n            summarize(avgPurchase=mean(amount))\n\ndim(graphOut) # 2097 * 4\n\n## 등급별 평균금액\nboxplot(graphOut$avgPurchase~graphOut$grade, notch=T)\n\nhead(basketGrade,1)\n\n\n\n## 등급별 branch현황 \ngraphOut2 <- basketGrade %>%\n  group_by(grade, custId, branchId) %>%\n  summarize(avgPurchase=mean(amount)) %>%\n  group_by(grade, branchId) %>%\n  summarize(N=n())\n\ngraphDummy <- data.frame(graphOut2)\nhead(graphDummy)\n\n## graphDummy에서 grade를 행으로, branchId를 열로 Number의 sum값을 cast하라.\ngraphCast <- cast(graphDummy, grade ~ branchId, value=\"N\", fun.aggregate=sum)\nhead(graphCast)\n\n# 각 x값 별로 비교를 하기위한 plot \nmatplot(graphCast)\nmatplot(graphCast, type=\"o\")\n# pch : 점모양 \nmatplot(graphCast, type=\"o\", pch=16)\nmatplot(graphCast, type=\"o\", pch=c(16,20,21,22), col=c(\"blue\", \"yellow\", \"magenta\", \"red\"))\n\n##범례 추가\nlegend(\"topright\", 95, c(\"branchId_1\", \"branchId_2\", \"branchId_3\", \"branchId_4\"), \n       lty=1:2,\n       cex=0.75,\n       lwd=c(1,1,1,1),\n#        ncol=1,\n       col=c(\"blue\",\"yellow\", \"magenta\",\"red\"))\n\n# ylim : y축 값 범위 \n# 수업시간에 뭐 그래프가 안나오니 어쩌니 그런건... \n# ylim 범위를 30,3000으로 지정했기 때문이라는...\nmatplot(matrix(1:12, 4), type=\"c\", lty=1, lwd=10, lend=lends) \n\n\nmatplot(graphCast, type=\"o\", pch=c(16,20,21,22), col=c(\"blue\", \"yellow\",\"magenta\",\"red\"), ylim=c(1,50000))\n\n?matplot\n\nlegend(\"topright\",\n       c(\"branchId_1\",\"branchId_2\",\"branchId_3\",\"branchId_4\"),\n       lty=c(1,1,1,1), # gives the legend appropriate symbols (lines)\n       cex=1,\n       lwd=c(5, 5, 5,5),\n       col=c(\"blue\", \"yellow\",\"magenta\",\"red\"))\n\n\ntext(x=matp, y=graphCast*1.05, labels=paste(graphCast,\"건\"))\n\ngraphmat <- as.matrix(graphCast)\nhead(graphmat)\n\nexample(matplot)\n?matplot\npdfpngplot(graphmat, \"pdfpngplot_01\", \"Customers rating points Status\", \"total number of customers\")\n?par\n\n## pdf 와 png 그래프를 만들기 위한 함수 \n## parameter : 그래프그를 data, 파일명, 그래프제목, y축 label 제목\npdfpngplot <- function(data, filename, maintitle, labtitle) {\n  # pdf 그래프 출력 샘플 -------\n  # 15 vs 11.25, 30 vs 22.5\n  \n  pdf(paste0(filename,\".pdf\"), width=10, height=7)\n  \n  par(mar=c(5,7,10,1))\n  \n  matplot(data, type=\"l\", xaxt=\"n\", yaxt=\"n\",\n          col=c(\"blue\", \"yellow\",\"magenta\",\"green\",\"red\"),\n          lwd=c(3,3,3,3),ylab=\"\")\n  title(main=maintitle, \n        col.main=\"gray\", cex.main=3.2)\n  title(ylab=labtitle, \n        col.lab=\"black\", cex.lab=3)\n  \n  axis(1,at=1:dim(data)[1],labels=row.names(data), las=2, cex=0.5)\n  axis(2, cex.axis=1.5)\n  \n  legend(\"topright\",\n         c(\"branchId_1\",\"branchId_2\",\"branchId_3\",\"branchId_4\"),\n         lty=c(1,1,1,1), # gives the legend appropriate symbols (lines)\n         cex=1,\n         lwd=c(5, 5, 5,5),\n         col=c(\"blue\", \"yellow\",\"magenta\",\"red\"))\n  dev.off()\n  \n  # png 그래프 출력 샘플 -------\n  png(paste0(filename,\".png\"), width=10, height=7, units = \"in\", res=400)\n  \n  par(mar=c(5,7,10,1))\n  \n  matplot(data, type=\"l\", xaxt=\"n\", yaxt=\"n\",\n          col=c(\"blue\", \"yellow\",\"magenta\",\"red\"),\n          lwd=c(3,3,3,3), ylab=\"\")\n  \n  title(main=maintitle, \n        col.main=\"gray\", cex.main=3.2)\n  \n  title(ylab=labtitle, \n        col.lab=\"black\", cex.lab=3)\n  \n  axis(1,at=1:dim(data)[1],labels=row.names(data), las=2, cex=0.5)\n  axis(2, cex.axis=1.5)\n  \n  legend(\"topright\",\n         c(\"branchId_1\",\"branchId_2\",\"branchId_3\",\"branchId_4\"),\n         lty=c(1,1,1,1), # gives the legend appropriate symbols (lines)\n         cex=1,\n         lwd=c(5, 5, 5,5),\n         col=c(\"blue\", \"yellow\",\"magenta\",\"red\"))\n  dev.off()\n}\n\n\n\n#blank plot으로 시작하는 방법 : 참고하라는 용인듯...\nplot(1, type=\"n\", axes=F, xlab=\"\", ylab=\"\")\nplot(3, type=\"n\", axes=T, xlab=\"\", ylab=\"\")\nmatplot(graphCast, type=\"n\")\n\n",
    "created" : 1432436830217.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "825959853",
    "id" : "A85F88CF",
    "lastKnownWriteTime" : 1432906031,
    "path" : "~/Rrepo/Rtest/RProgramming_Test.R",
    "project_path" : "RProgramming_Test.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_source"
}