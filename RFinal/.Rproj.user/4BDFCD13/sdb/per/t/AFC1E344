{
    "contents" : "library(dplyr)\ninstall.packages(\"reshape\")\nlibrary(reshape)\ninstall.packages(\"jpeg\")\nlibrary(jpeg)\ntrainData <- read.csv(\"trainData.csv\")\nhead(trainData)\n## 문제1 #####\n\nmtrushBMP <- readJPEG(\"finalreport.jpg\")\nstr(mtrushBMP)\nclass(mtrushBMP)\ndim(mtrushBMP)\nrange(mtrushBMP[1,,1])\nmax(mtrushBMP)\nmin(mtrushBMP)\n\nfor (x in 1:dim(mtrushBMP)[1]) {\n  if ((x %% 100 == 0) || (x %% 101 == 0) || (x %% 102 == 0) || (x %% 103 == 0)) {\n    mtrushBMP[x,,1] <- 1\n    mtrushBMP[x,,2] <- 1\n    mtrushBMP[x,,3] <- 1\n  }\n}\n\nfor (y in 1:dim(mtrushBMP)[2]) {\n  if ((y %% 100 == 0) || (y %% 101 == 0) || (y %% 102 == 0) || (y %% 103 == 0)) {\n    mtrushBMP[,y,1] <- 1\n    mtrushBMP[,y,2] <- 1\n    mtrushBMP[,y,3] <- 1\n  }\n}\n\n\nwriteJPEG(mtrushBMP,target=\"finalreport_whiteline.jpg\")\n\n##################\n\n## 문제2 #####\nloyalCustomGroup <- group_by(trainData, touristID)\nhead(loyalCustomGroup)\n\nloyalCustomSummary <- summarize(loyalCustomGroup, CallCount = length(dateChar))\nhead(loyalCustomSummary)\n\nloyalCustomer <- arrange(loyalCustomSummary, desc(CallCount))\nhead(loyalCustomer)\n## 상위 5명의 touristID\n## tour000125  100 \n## tour001313  87\n## tour003314  77\n## tour002587  74\n## tour005763  65\n\n###############\n\n\n## 문제3 #### \nTopVisitGroup <- group_by(trainData,  nation)\nTopVisitSummary <- summarize(TopVisitGroup, visitCount = length(dateChar))\n\nhead(TopVisitSummary)\n\nTopVisitNation <- arrange(TopVisitSummary, desc(visitCount))\n\nhead(TopVisitNation)\n\n## 가장 많이 방문한 나라는 China\n##############\n\n## 문제 4 ####\n## 1등국가 - 3등 국가 \n## China - Canada \nvisitDiff <- TopVisitNation[1,2] - TopVisitNation[3,2]\nvisitDiff  ## 83403 \n##############\n\n## 문제 5 ####\n# 날짜 합치기\ntrainData$Timestamp <- strptime(paste0(trainData$dateChar,\" \", trainData$timeChar), format=\"%Y/%m%d %H%M-%S\")\n#시간 \ntrainData$hour <- trainData$Timestamp$hour\n#요일 \ntrainData$wday <- trainData$Timestamp$wday\ntrainData$wday <- factor(trainData$wday, levels=c(1:6,0), ordered=T, labels=c(\"월\",\"화\",\"수\",\"목\",\"금\",\"토\",\"일\"))\n\ntrainData$Timestamp <- as.character(trainData$Timestamp)\ntimeGroup <- group_by(trainData,  hour)\nhead(as.data.frame(timeGroup))\n\ntimeGroupSummary <- summarize(timeGroup, timeCount = length(touristID))\n\nhead(timeGroupSummary)\n\nMaxTimeRange <- arrange(timeGroupSummary, desc(timeCount))\nhead(MaxTimeRange)\n\n## 가장 많이 타는 시간대는 15시 ~ 17시 사이이다.   \n##############\n\n## 문제6 ####\nMaxDaycountGroup <- group_by(trainData, wday)\n\nhead(MaxDaycountGroup)\n\nMaxDaycountSummary <- summarize(MaxDaycountGroup, wdayCount = length(touristID))\n\nMaxDayCount <- arrange(MaxDaycountSummary, desc(wdayCount))\nhead(MaxDayCount)\n## 금요일에 통화건수가 가장 많다 \n#############\n\n## 문제7 ####\nWeekDayCallCountGroup <- group_by(trainData, touristID, wday)\n\nweekDayCallCountSummary <- summarize(WeekDayCallCountGroup, Count=length(wday))\n\n## touristID 별 wday cast \nweekDayCallCountCast <- cast(weekDayCallCountSummary, touristID ~ wday, value=\"Count\", fun.aggregate=sum)\n\nhead(weekDayCallCountCast)\n\n## 주중 통화량\nweekDayCallCountCast$weekdayCall <- apply(weekDayCallCountCast[,2:6],1,sum)\n\n## 주말 통화량 \nweekDayCallCountCast$weekendCall <- apply(weekDayCallCountCast[,7:8],1,sum)\n\nhead(weekDayCallCountCast)\n#############\n\n## 문제8 ####\nNationRateGroup <- group_by(trainData, city, nation)\n\nNationRateSummary <- summarize(NationRateGroup, nationCnt = length(nation))\n\nNationRateCast <- cast(NationRateSummary, city ~ nation, value=\"nationCnt\", fun.aggregate= sum)\n\nNationRateCast$sum <- apply(NationRateCast[,2:11],1,sum)\nNationRateCastPercent <- data.frame(city=NationRateCast$city, NationRateCast[,2:11]/NationRateCast$sum)\n\n## 통화건수 비중\nhead(NationRateCastPercent)\n\n#############\n\n## 문제 9 ####\n\n# 1. 날짜에 대해서 날짜형식으로 변환 \ntrainData$dateChar <- strptime(trainData$dateChar, format=\"%Y/%m%d\")\n\nhead(trainData)\n\n# 2. 문자열로 변환 후 gsub을 통해 -를 제거\ntrainData$dateChar <- as.character(trainData$dateChar)\ntrainData$dateChar <- gsub(\"-\", \"\", trainData$dateChar)\n\n# 3. 날짜를 계산하기 위해 numeric으로 변환 \ntrainData$dateChar <- as.numeric(trainData$dateChar)\n\n# 4. touristID 별로 group_by 한 후 max(최근통화일), min(최초통화일), period(차이) 로 summary\nlengthOfVisitGroup <- group_by(trainData, touristID)\nlengthOfVisitSummary <- summarize(lengthOfVisitGroup, maxRecency=max(dateChar), minRecency=min(dateChar), count = sum(touristID), period = max(dateChar) - min(dateChar))\n\nhead(lengthOfVisitSummary)\n\n# 5. 4에서 구한 summary에 최근 통화일, 최초 통화일을 날짜형식으로 출력\nlengthOfVisitSummary$maxDate <- as.Date(as.character(lengthOfVisitSummary$maxRecency), format=\"%Y%m%d\")\nlengthOfVisitSummary$minDate <- as.Date(as.character(lengthOfVisitSummary$minRecency), format=\"%Y%m%d\")\n\nhead(lengthOfVisitSummary)\n\nhead((lengthOfVisitSummary$maxDate - lengthOfVisitSummary$minDate)/7)\n\n# 6. 평균체류기간(7일)을 기준으로 방문일수 구하기\nlengthOfVisitSummary$lengthOfVisitCnt <- round((lengthOfVisitSummary$maxDate - lengthOfVisitSummary$minDate)/7,0)\n\nhead(lengthOfVisitSummary)\n\nlibrary(plyr)\nhead(trainData)\n\n# 7. merge를 위한 데이터를 summary(touristID, lengthOfVisitCnt 를 기준으로 summary)\nLengthOfVisitSum <-summarize(lengthOfVisitSummary, touristID, lengthOfVisitCnt)\n\n# 8 data를 merge한다.\nmergeData <- merge(weekDayCallCountCast, LengthOfVisitSum,  by = \"touristID\")\n\nhead(mergeData)\n\n\n# 9. lengthOfVisitCnt(방문횟수) column의 위치를 바꾸기 위한 작업 시작\n## 9-1 lengthOfVisitCnt 의 위치 구하기 \ncol_idx <- grep(\"lengthOfVisitCnt\", names(mergeData))\n\n## 9-2 위의 9-1에서 구한 위치를 통해 mergeData의 Column위치 변경하기\nmergeVisitData <- mergeData[, c(1,col_idx, 3:col_idx-1)]\n\n## 데이터를 어디에 붙여넣을지 몰라서 기존 통화량 계산한 data에 붙여 넣었습니다. \n\nhead(mergeVisitData)\ntail(mergeVisitData)\n\nsave(list=ls(), file=\"finaltest_이재현_U2015046.RData\") \n\n# testgroup <- group_by(lengthOfVisitSummary, touristID, lengthOfVisitCnt)\n# head(summarize(testgroup, touristID, lengthOfVisitCnt, cnt = length(touristID)))\n\n################",
    "created" : 1434462185184.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "832947569",
    "id" : "AFC1E344",
    "lastKnownWriteTime" : 1434551126,
    "path" : "C:/Repositories/RFinal/finalReport_Question_Answer.R",
    "project_path" : "finalReport_Question_Answer.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_source"
}