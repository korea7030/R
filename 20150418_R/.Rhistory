getwd()
tweetDf <- do.call("rbind", lapply(tweetList, as.data.frame))
install.packages("twitteR")
install.packages("ROAuth")
install.packages("RCurl")
library(twitteR)
library(ROAuth)
library(RCurl)
credential <- OAuthFactory$new(consumerKey = "1oOphkaTQunRAwXVE5TtGCrCz", consumerSecret = "QpSqEGGwlqfGKaoP3uX7XpMmmLAgwldBmBQ1ap3hJen4FLTWIx", requestURL = "https://api.twitter.com/oauth/request_token", accessURL="https://api.twitter.com/oauth/access_token", authURL = "https://api.twitter.com/oauth/authorize")
credential
download.file(url="http://curl.haxx.se/ca/cacert.pem", destfile="cacert.pem")
credential$handshake(cainfo="cacert.pem")
setup_twitter_oauth(credential$consumerKey,credential$consumerSecret, credential$oauthKey,credential$oauthSecret)
searchWord <- iconv("#박지성","CP949","UTF-8")
searchWord
tweetList <- searchTwitter(searchWord, n=500)
head(tweetList)
tweetList[[1]]
tweetDf <- do.call("rbind", lapply(tweetList, as.data.frame))
dim(tweetDf)
names(tweetDf)
str(tweetDf)
lapply
tweetDfErr
tweetDfErr
tweetDfErr <- rbind(lapply(tweetList, as.data.frame))
tweetDfErr
install.packages("jpeg")
mtrushBMP <- readJPEG("image_sample.jpg")
library(jpeg)
mtrushBMP <- readJPEG("image_sample.jpg")
str(mtrushBMP)
class(mtrushBMP)
dim(mtrushBMP)
range(mtrushBMP[1,,1])
max(mtrushBMP)
min(mtrushBMP)
mtrushBMP[100:200,100:200,1] <- 1
mtrushBMP[100:200,100:200,2] <- 1
mtrushBMP[100:200,100:200,3] <- 1
writeJPEG(mtrushBMP,target="mtrushJPG.jpg")
mtrushBMP <- readJPEG("image_sample.jpg")
for (x in 1:dim(mtrushBMP)[1]) {
if ( x %% 50 == 0) {
mtrushBMP[x,,1] <- 1
mtrushBMP[x,,2] <- 1
mtrushBMP[x,,3] <- 1
}
}
writeJPEG(mtrushBMP,target="mtrushJPG_x.jpg")
mtrushBMP <- readJPEG("image_sample.jpg")
for (y in 1:dim(mtrushBMP)[2]) {
if ( y %% 50 == 0) {
mtrushBMP[,y,1] <- 1
mtrushBMP[,y,2] <- 1
mtrushBMP[,y,3] <- 1
}
}
writeJPEG(mtrushBMP,target="mtrushJPG_y.jpg")
mtrushBMP <- readJPEG("image_sample.jpg")
for (x in 1:dim(mtrushBMP)[1]) {
if ( x %% 50 == 0) {
mtrushBMP[x,,1] <- 1
mtrushBMP[x,,2] <- 1
mtrushBMP[x,,3] <- 1
}
}
writeJPEG(mtrushBMP,target="mtrushJPG_x.jpg")
for (y in 1:dim(mtrushBMP)[2]) {
if ( y %% 50 == 0) {
mtrushBMP[,y,1] <- 1
mtrushBMP[,y,2] <- 1
mtrushBMP[,y,3] <- 1
}
}
writeJPEG(mtrushBMP,target="mtrushJPG_xy.jpg")
str(mtrushBMP)
class(mtrushBMP)
dim(mtrushRGB)
mtrushRGB <- brick("image_sample.jpg")
install.packages("raster", dependencies=T)
library(raster)
mtrushRGB <- brick("image_sample.jpg")
mtrushRGBvalue <- getValues(mtrushRGB)
dim(mtrushRGB)
str(mtrushRGB)
dim(mtrushBMP)
str(mtrushBMP)
max(mtrushRGB)
max(mtrushRGB)
min(mtrushRGB)
range(mtrushBMP[1,,1])
dim(mtrushBMP)
class(mtrushBMP)
max(mtrushBMP)
min(mtrushBMP)
mtrushBMP[100:200,100:200,1] <- 1
mtrushBMP[100:200,100:200,2] <- 1
mtrushBMP[100:200,100:200,3] <- 1
mtrushJPG.jpg
dim(mtrushRGB)
str(mtrushRGB)
class(mtrushBMP)
class(mtrushRGB)
summary(cars)
Q32014$dateStart <- strptime(Q32014$Start.date , format="%m-%d-%Y %H:%M")
Q42014 <- read.csv(file.choose(), header=TRUE, na.strings="NA", stringsAsFactors=TRUE)
Q32014 <- read.csv(file.choose(), header=TRUE, na.strings="NA", stringsAsFactors=TRUE)
Q32014 <- read.csv(file.choose(), header=TRUE, na.strings="NA", stringsAsFactors=TRUE)
head(Q42014,1)
head(Q32014,1)
Q32014$dateStart <- strptime(Q32014$Start.date , format="%m-%d-%Y %H:%M")
Q32014$dateEnd <- strptime(Q32014$End.date , format="%m-%d-%Y %H:%M")
Q32014$rideTime <- (as.numeric(Q32014$dateEnd - Q32014$dateStart)/60)
hist(Q42014$rideTime)
Q32014$rideTime <- (as.numeric(Q32014$dateEnd - Q32014$dateStart)/60)
Q32014$dateStart <- strptime(Q32014$Start.date , format="%m-%d-%Y %H:%M")
Q32014$dateEnd <- strptime(Q32014$End.date , format="%m-%d-%Y %H:%M")
Q32014$rideTime <- (as.numeric(Q32014$dateEnd - Q32014$dateStart)/60)
hist(Q42014$rideTime)
Q32014$rideTime
View(`Q32014`)
Q32014$dateStart <- strptime(Q32014$Start.date , format="%m-%d-%Y %H:%M")
Q32014$dateEnd <- strptime(Q32014$End.date , format="%m-%d-%Y %H:%M")
Q32014$rideTime <- (as.numeric(Q32014$dateEnd - Q32014$dateStart)/60)
Q32014$rideTime
Q32014$dateStart
Q32014$dateEnd
Q32014$dateStart <- strptime(Q32014$Start.date , format="%m/%d/%Y %H:%M")
Q32014$dateEnd <- strptime(Q32014$End.date , format="%m/%d/%Y %H:%M")
Q32014$rideTime <- (as.numeric(Q32014$dateEnd - Q32014$dateStart)/60)
hist(Q42014$rideTime)
Q32014$dateStart <- strptime(Q32014$Start.date , format="%m/%d/%Y %H:%M")
Q32014$dateStart
Q32014$dateEnd <- strptime(Q32014$End.date , format="%m/%d/%Y %H:%M")
Q32014$dateEnd
Q32014$rideTime <- (as.numeric(Q32014$dateEnd - Q32014$dateStart)/60)
hist(Q42014$rideTime)
hist(Q32014$rideTime)
hist(Q32014$rideTime, breaks=200)
library(jpeg)
mtrushBMP <- readJPEG("image_sample.jpg")
str(mtrushBMP)
class(mtrushBMP)
dim(mtrushBMP)
max(mtrushBMP)
min(mtrushBMP)
range(mtrushBMP[1,,1])
class(mtrushBMP)
min(mtrushBMP)
max(mtrushBMP)
mtrushBMP[100:200,100:200,1] <- 255
mtrushBMP[100:200,100:200,2] <- 0
mtrushBMP[100:200,100:200,3] <- 0
writeJPEG(mtrushBMP,target="mtrushJPG.jpg")
mtrushBMP[100:200,100:200,1] <- 0
mtrushBMP[100:200,100:200,2] <- 255
mtrushBMP[100:200,100:200,3] <- 0
writeJPEG(mtrushBMP,target="mtrushJPG.jpg")
?matix
?matrix
myMatrix <- matrix(1:20, nrow=4))
myMatrix <- matrix(1:20, nrow=4)
myMatrix
myMatrix[,3]
myMatrix[,3, drop=F]
subsetVectordrop <- myMatrix[,3]
subsetVectorNodrop <- myMatrix[,3, drop=F]
str(subsetVectordrop)
class(subsetVectordrop)
str(subsetVectorNodrop)
class(subsetVectorNodrop)
?jpeg
mtrushBMP <- readJPEG("image_sample.jpg", native=T)
str(mtrushBMP)
class(mtrushBMP)
dim(mtrushBMP)
range(mtrushBMP[1,,1])
max(mtrushBMP)
min(mtrushBMP)
mtrushBMP <- readJPEG("image_sample.jpg")
str(mtrushBMP)
class(mtrushBMP)
dim(mtrushBMP)
range(mtrushBMP[1,,1])
max(mtrushBMP)
min(mtrushBMP)
