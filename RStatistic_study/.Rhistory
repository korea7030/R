sqldf("select avg(Sepal_Length) from iris where Species = 'setosa'")
library(sqldf)
sqldf("select avg(Sepal_Length) from iris where Species = 'setosa'")
sqldf("SELECT distinct Species FROM iris")
sqldf("SELECT avg(Sepal_Length) FROM iris WHERE Species = 'setosa'")
sqldf("SELECT avg(Sepal_Length) FROM iris WHERE Species = 'setosa'")
sqldf("SELECT avg(Sepal.Length) FROM iris WHERE Species = 'setosa'")
sqldf("SELECT avg(Sepal_Length) FROM iris WHERE Species = 'setosa'")
sqldf("SELECT avg(iris.Sepal_Length) FROM iris WHERE Species = 'setosa'")
library(RJDBC)
sqldf("SELECT avg(Sepal_Length) FROM iris WHERE Species = 'setosa'")
library(RODBC)
install.packages("RODBC")
sqldf("SELECT distinct Species FROM iris")
library(RODBC)
sqldf("SELECT avg(Sepal_Length) FROM iris WHERE Species = 'setosa'")
mean(subset(iris, Species == "setosa")$Sepal.Length)
sqldf("select avg(Sepal_Length) from iris where Species = 'setosa'")
install.packages("RJDBC", dep=TRUE)
install.packages("RJDBC", dep = TRUE)
library(RJDBC)
sqldf("SELECT avg(Sepal_Length) FROM iris WHERE Species = 'setosa'")
library(sqldf)
sqldf("SELECT avg(Sepal_Length) FROM iris WHERE Species = 'setosa'")
mean(subset(iris, Species == "setosa")$Sepal.Length)
sqldf("SELECT distinct Species FROM iris")
sqldf("select avg(Sepal_Length) from iris where Species = 'setosa'")
sqldf("select avg(Sepal.Length) from iris where Species = 'setosa'")
sqldf("SELECT avg(Sepal_Length) FROM iris WHERE Species = 'setosa'")
sqldf("SELECT avg(Sepal_Length) FROM iris WHERE Species = 'setosa'")
sqldf("select avg(Sepal_Length) from iris where Species = 'setosa'")
sqldf("SELECT distinct Species FROM iris")
sqldf("SELECT avg('Sepal_Length') FROM iris WHERE Species = 'setosa'")
sqldf('SELECT avg("Sepal_Length") FROM iris WHERE Species = 'setosa'')
sqldf('SELECT avg("Sepal_Length") FROM iris WHERE Species = "setosa"')
sqldf('SELECT avg(Sepal_Length) FROM iris WHERE Species = "setosa"')
require(sqldf)
sqldf("SELECT avg(Sepal_Length) FROM iris WHERE Species = 'setosa'")
sqldf("select avg(Sepal_Length) from iris where Species = 'setosa'")
load(sqldf.R)
load("sqldf.R")
load("sqldf.R")
source("sqldf.R")
sqldf("SELECT distinct Species FROM iris")
sqldf("SELECT avg(Sepal_Length) FROM iris WHERE Species = 'setosa'")
sqldf("SELECT avg(Sepal.Length) FROM iris WHERE Species = 'setosa'")
Q
sqldf('SELECT avg(Sepal_Length) FROM iris WHERE Species = "setosa"')
sqldf('SELECT avg("Sepal_Length") FROM iris WHERE Species = "setosa"')
sqldf("SELECT avg(Sepal_Length) FROM iris WHERE Species = 'setosa'")
Q
View(sqldf)
library(RSQLite)
sqldf("SELECT avg(Sepal_Length) FROM iris WHERE Species = 'setosa'")
sqldf("SELECT avg(Sepal.Width) FROM iris WHERE Species = 'setosa'")
Q
sqldf("SELECT avg(Sepal_Width) FROM iris WHERE Species = 'setosa'")
sqldf('select avg("Sepal.Length") from iris where Species="setosa"')
sqldf('select avg("Sepal.Length") from iris where "Species"="setosa"')
sqldf('select avg("Sepal.Length") from iris where Species="setosa"')
sqldf('select avg("Sepal.Length") from iris group by "Species"')
sapply(split(iris$Sepal.Length, iris$Species), mean)
library(plyr)
library(plyr)
install.packages("plyr")
library(plyr)
adply(iris,
1,
function(row) { row$Sepal.Length >= 5.0 &
row$Species == "setosa"})
adply(iris,
1,
function(row) {
data.frame(sepal_ge_5_setosa = c(row$Sepal.Length >= 5.0 &
row$Species == "setosa"))
})
ddply(iris,
.(Species),
function(sub) {
data.frame(sepal.width.mean = mean(sub$Sepal.Width))
})
ddply(iris,
.(Species),
function(sub) {
mean(sub$Sepal.Width))
})
ddply(iris,
.(Species),
function(sub) {
mean(sub$Sepal.Width)
})
head(iris)
sqldf('insert into iris values (1.0,2.0,2.0,2.0, "setosa")')
head(iris)
tail(iris)
sqldf('insert into iris values (1.0,2.0,2.0,2.0, "setosa")')
sqldf('insert into iris values (1.0,2.0,2.0,2.0, "setosa")')
ddply(iris,
.(Species, Sepal.Length > 5.0),
function(sub) {
data.frame(sepal.width.mean = mean(sub$Sepal.Width))
})
head(ddply(baseball, .(id), transform, cyear = year - min(year) + 1))
head(ddply(baseball, .(id), mutate, cyear = year - min(year)+1, log_cyear = log(cyear)))
head(ddply(baseball, .(id), summarise, minyear = min(year)))
head(ddply(baseball, .(id), subset, g==max(g)))
head(ddply(baseball, .(id), transform, cyear = year - min(year) + 1))
baseball$cyear = baseball$year - min(baseball)+1
baseball$cyear = baseball$year - min(baseball$year)+1
head(ddply(baseball, .(id), mutate, cyear = year - min(year)+1, log_cyear = log(cyear)))
summarise(baseball, minyear = min(year))
head(ddply(baseball, .(id), summarise, minyear = min(year)))
baseball_grp <- group_by(baseball, id)
library(dplyr)
install.packages("dplyr)")
install.packages("dplyr")
library(dplyr)
baseball_grp <- group_by(baseball, id)
summarise(baseball, minyear = min(year))
summarise(baseball_grp, minyear = min(year))
head(ddply(baseball, .(id), summarise, minyear = min(year)))
head(summarize(baseball_grp, minyear = min(year)))
subset(baseball, id, g == max(g))
subset(baseball, select = "id"", g == max(g))
subset(baseball, select = "id"", g == max(g))
head(ddply(baseball, .(id), subset, g==max(g)))
subset(baseball, select = "id", g == max(g))
subset(baseball,  g == max(g))
(x<- data.frame(mean=1:5, sd=1:5))
mdply(x, rnorm, n=2)
install.packages("reshape2")
library(reshape2)
m <- melt(french_fries, id.vars = 1:4)
head(m)
head(french_fries)
ddply(m, .(variable), summarise, mean = mean(value, na.rm=TRUE))
french_fries[!complete.cases(french_fries), ]
mean(x<- c(1,2,3))
mean(x<-c(1,2,NA,3,4))
mean(x<-c(1,2,NA,3,4), na.rm=TRUE)
x
m <- melt(id=1:4, french_fries, na.rm=TRUE)
head(m)
m <- melt(french_fries, id.vars=1:4)
r <- dcast(m, time+treatment+subject+rep ~ ...)
m <- melt(french_fries, id.vars=1:4)
r <- dcast(m, time+treatment+subject+rep ~ ...)
rownames(r) <- NULL
rownames(french_fries) <- NULL
identical(r, french_fries)
head(r)
identical(r, french_fries)
m <- melt(french_fries, id.vars=1:4)
dcast(m, time~variable)
dcast(m, time~variable, mean, na.rm=TRUE)
dcast(m, time~treatment+variable, mean, na.rm = TRUE)
install.packages("data.table")
library(data.table)
class(data.table)
class(data.table())
iris_table <- as.data.table(iris)
x <- data.table(x=c(1,2,3), y=c("a","b","c"))
tables()
iris_table <- as.data.table(iris)
x <- data.table(x=c(1,2,3), y=c("a","b","c"))
tables()
tables(x)
table(x)
table(iris_table)
tables
tables()
DT <- as.data.table(iris)
DT[1,]
DT[DT$Species == "setosa",]
DT[1, Sepal.Length]
DT[1, list(Sepal.Length, Species)]
DT[, mean(Sepal.Length)]
DT[, mean(Sepal.Length - Sepal.Width)]
x <- add_one_to_vec(1:100000)
add_one <- function(val) {
return (val+1)
}
add_one_to_vec <- function(x) {
for (i in seq_long(x)) {
x[i] <- add_one(x[i])
}
return (x)
}
x <- add_one_to_vec(1:100000)
add_one_to_vec <- function(x) {
for (i in seq_along(x)) {
x[i] <- add_one(x[i])
}
return (x)
}
x <- add_one_to_vec(1:100000)
head(x)
tables()
library(data.table)
tables()
library(sqldf)
install.packages("sqldf")
library(sqldf)
library(plyr)
install.packages("plyr")
library(plyr)
install.packages("dplyr")
library(dplyr)
install.packages("reshape2")
library(reshape2)
install.packages("data.table")
library(data.table)
tables()
system.time(x <- DF[DF$y == "C",])
DF <- data.frame(x=runif(260000), y=rep(LETTERS, each=10000))
system.time(x <- DF[DF$y == "C",])
DT <- as.data.table(DF)
setkey(DT,y)
DT[1,y]
DT1,y]
DT[,y]
DT[1,y]
system.time(x <- DT[J("C"), ])
system.time(x <- DF[DF$y == "C",])
system.time(x <- DT[J("C"), ])
DT[J("C"), list(x_mean = mean(x), x_std = sd(x))]
DT[J("C"), y, list(x_mean = mean(x), x_std = sd(x))]
DT[J("C"), list(x_mean = mean(x), x_std = sd(x))]
DT[y, list(x_mean = mean(x), x_std = sd(x))]
DT[1,y]
setkey(DT,y)
DT[J("C"), list(x_mean = mean(x), x_std = sd(x))]
DT2 <- data.table(y=c("A","B","C"), z=c("a","b","c"))
DT1 <- data.table(x=runif(26000), y=rep(LETTERS, each=10000))
setkey(DT,1)
setkey(DT1,y)
DT1[DT2, ]
DT1[DT2, ]
setkey(DT2, y)
DT2[DT1,]
nrow(DT2)
DT2[DT1,]
nrow(DT2[DT1,])
DT1[DT2, ]
nrow(DT1[DT2, ])
setkey(DT1,y)
nrow(DT1[DT2, ])
setkey(DT2, y)
nrow(DT2[DT1,])
system.time(DT1[DT2,])
DF1 <- as.data.frame(DT1)
DF2 <- as.data.frame(DT2)
system.time(merge(DF1, DF2))
m <- matrix(1, nrow=1000, ncol=100)
DF <- as.data.frame(m)
DT <- as.data.table(m)
head(DF)
head(DT)
head(DF)
system.time({
for (i in 1:1000) {
DF[i,1] <- i
}
})
system.time({
for (i in 1:1000) {
DT[i, V1 := i]
}
})
system.time({
for (i in 1:1000) {
DF[i,1] <- i
}
})
DT <- as.data.table(m)
system.time({
for (i in 1:1000) {
DT[i, V1 := i]
}
})
system.time({
for (i in 1:1000) {
DF[i,1] <- i
}
})
install.packages("foreach")
library(foreach)
install.
install.packages("doParallel")
library(doParallel)
install.
install.packages("testthat")
library(testthat)
head(adply(iris[,1:4] ,
1,
function(row) { print(row)}))
library(plyr)
head(adply(iris[,1:4] ,
1,
function(row) { print(row)}))
head(iris)
head(adply(iris,
1,
sum))
sum))
head(adply(iris[,1:4],
1,
sum))
head(adply(iris,
1,
function(row) {
if (row$Sepal.Width >= 3.5) {
a = "A"
}else {
a = "B"
}
data.frame(sepal_ge_5_setosa =
a)
}))
rnorm(0,1)
rnorm(1)
rnorm(1)
rnorm(1)
(x<- data.frame(mean=1:5, sd=1:5))
mdply(x, rnorm, n=2)
mdply(x, rnorm, n=2)
mdply(x, rnorm, n=2)
mdply(x, rnorm, n=2)
mdply(x, rnorm, n=1)
mdply(x, rnorm, n=2)
mdply(x, rnorm, n=3)
mdply(x, rnorm, n=4)
mdply(x, rnorm, n=2)
head(ddply(baseball, .(id), cyear = year - min(year) + 1))
head(ddply(baseball, .(id), cyear = year - min(year) + 1))
head(french_fries)
is.na(french_fries)
m <- melt(french_fries, id.vars = 1:4)
head(m)
library(reshape2)
m <- melt(french_fries, id.vars = 1:4)
head(m)
is.na(m)
which(is.na(m) == TRUE)
x <- c(1,2,3,4)
mean(x)
mean(x)
mean(x, na.rm=TRUE)
sum(x)
x <- c(1,2,NA,3)
sum(x)
mean(x)
mean(x, na.rm = TRUE)
head(french_fries[!complete.cases(french_fries), ])
identical(r, french_fries)
library(data.table)
iris_table <- as.data.table(iris)
x <- data.table(x=c(1,2,3), y=c("a","b","c"))
tables()
DT[1,1]
DT[1,1, with=FALSE]
DT[1,1]
DT[1,1, with=FALSE]
iris[1,1, with=FALSE]
iris_table[1,1,with=FALSE]
iris_table[1,1]
iris_table[1,1]
iris_table[1,1]
iris_table[1,1,with=FALSE]
iris_table[1,2]
iris_table[1,1,with=FALSE]
LETTERS
DF <- data.frame(x=runif(260000), y=rep(LETTERS, each=10000))
system.time(x <- DF[DF$y == "C",])
DT1 <- data.table(x=runif(260000), y=rep(LETTERS, each=10000))
DT2 <- data.table(y=c("A","B","C"), z=c("a","b","c"))
setkey(DT1,y)
nrow(DT1[DT2, ])
DT1 <- data.table(x=runif(260000), y=rep(LETTERS, each=10000))
DT2 <- data.table(y=c("A","B","C"), z=c("a","b","c"))
setkey(DT1,y)
nrow(DT1[DT2, ])
DT1 <- data.table(x=runif(260000), y=rep(LETTERS, each=10000))
DT2 <- data.table(y=c("A","B","C"), z=c("a","b","c"))
setkey(DT1,y)
nrow(DT1[DT2, ])
setkey(DT2, y)
nrow(DT2[DT1,])
z<- lapply(1:1000, function(x) {
data.frame(val=x, val2=2*x, val3=2/x, val4=4*x, val5=4/x)
})
system.time(y <- do.call(rbind, x,z)) ## 여러개의 data.frame을 합칠때 사용
z<- lapply(1:1000, function(x) {
data.frame(val=x, val2=2*x, val3=2/x, val4=4*x, val5=4/x)
})
z
system.time(y <- do.call(rbind, x)) ## 여러개의 data.frame을 합칠때 사용
system.time(y <- do.call(rbind, x,z)) ## 여러개의 data.frame을 합칠때 사용
?do.call
system.time(y <- do.call(rbind, list(x,z)) ## 여러개의 data.frame을 합칠때 사용
)
y
head(y)
nrow(y)
system.time(y <- do.call(rbind, x) ## 여러개의 data.frame을 합칠때 사용
)
system.time(y <- do.call(rbind, x)) ## 여러개의 data.frame을 합칠때 사용
system.time(y <- do.call(rbind, x)) ## 여러개의 data.frame을 합칠때 사용
system.time(x <- rbindlist(x))  ## 2. 그 결과를 다시 data.table로 변경
x<- lapply(1:1000, function(x) {
data.frame(val=x, val2=2*x, val3=2/x, val4=4*x, val5=4/x)
})
system.time(y <- do.call(rbind, x)) ## 여러개의 data.frame을 합칠때 사용
system.time(y <- do.call(rbind, list(x,z)) ## 여러개의 data.frame을 합칠때 사용
)
system.time(y <- do.call(rbind, x)) ## 여러개의 data.frame을 합칠때 사용
library(doParallel)
registerDoParallel(cores=4)
dlply
foreach(i = 1:10000) %dopar% {
mean(big_data$value + i)
}
big_data <- data.frame(
value = runif(NROW(LETTERS) * 200000),
group = rep(LETTERS, 200000))
foreach(i = 1:10000) %dopar% {
mean(big_data$value + i)
}
library(testthat)
a <- 1:3
a
b <- 1:3
b
expect_equal(a,b) # 문제없음
expect_equivalent(a,b)
names(a) <- c('a','b','c') # a vector에 이름부여
a
b
expect_equal(a,b) # vector들 간의 이름,값 확인
expect_equivalent(a,b) # vector들 간의 값만 확인
expect_equal(a,b) # vector들 간의 이름,값 확인
expect_equal(a,b) # vector들 간의 이름,값 확인
expect_equivalent(a,b) # vector들 간의 값만 확인
fib <- function(n) {
if (n==0) {
return(1)
}
if (n < 0) {
return (fib(n-1) + fib(n-2))
}
}
expect_equal(1,fib(0)) # 성공
expect_equal(1,fib(0)) # 성공
expect_equal(1,fib(1)) # 에러
test_that("base case", {
expect_equal(1, fib(0))
expect_equal(1, fib(1))
})
fib <- function(n) {
if (n==0 || n==1) {
return(1)
}
if (n >=2) {
return (fib(n-1) + fib(n-2))
}
}
fib <- function(n) {
if (n==0 || n==1) {
return(1)
}
if (n >=2) {
return (fib(n-1) + fib(n-2))
}
}
test_that("base test", {
expect_equal(1, fib(0))
expect_equal(1, fib(1))
})
test_that("recursion test", {
expect_equal(2, fib(2))
expect_equal(3, fib(3))
expect_equal(5, fib(4))
})
source("run_tests.R")
cat("hi");cat("hello")
print("hi"); print("hello")
cat("hi");cat("hello")
cat("hi\n");cat("hello")
sum_to_ten <- function() {
sum <- 0
cat("Adding ...")
for (i in 1:10) {
sum <- sum+i
cat(i, "...")
}
cat("Done!", "\n")
return (sum)
}
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
sum_to_ten()
s
sum_to_ten_browser <- function() {
sum <- 0
for (i in 1:10) {
sum <- sum+i
if (i >= 5) {
browser()
}
}
return (sum)
}
sum_to_ten_browser()
