{
    "contents" : "rm(list=ls())\nlibrary(dplyr)\ntrainData <- read.csv(\"trainData.csv\")\n\nuniqIdAggr <- group_by(trainData, touristID)\nuniqIdSumm <- summarise(uniqIdAggr, x=length(dateChar))\nhead(uniqIdSumm)\n\nuniqIdArrange <- arrange(uniqIdSumm, desc(x))\n\nhead(uniqIdArrange)\n\n######################################################\nIdNationGroup <- group_by(trainData, touristID, nation)\nIdNationSumm <- summarise(IdNationGroup, x= length(city))\n\nIdNationTable <- table(IdNationSumm$nation)\n\nhead(IdNationTable)\n\nhist(IdNationTable)\n## China\n## arrange 로 정렬할 경우, group_by의 기준 컬럼이 한개여야만 정렬이 된다. \nIdNationArrange <- arrange(IdNationSumm, desc(x))\n\n## 정렬하기 위해 order 함수 사용\nhead(IdNationSumm[order(IdNationSumm$x, decreasing=T),],20)\n\nIdNationSumm <- IdNationSumm[order(IdNationSumm$x, decreasing=T),]\n\nhead(IdNationSumm)\n?order ## 정렬된 순서를 반환\n\nNationAggr <- group_by(IdNationSumm, nation)\nNationSumm <- summarise(NationAggr, Count = sum(x))\n\nhead(NationSumm)\n\nNationArrange <- arrange(NationSumm, desc(Count))\nhead(NationArrange)\n\n## 1등 - 3등 : 95428 - 12025 \n\n## 날짜 합치기\ntrainData$timestamp <- strptime(paste0(trainData$dateChar,trainData$timeChar), format=\"%Y/%m%d %H%M-%S\")\n\nhead(trainData$timestamp)\n## 일자\ntrainData$wday <- trainData$timestamp$wday  # 0 : 일요일 , 6 : 토요일\n\ntrainData$wday <- factor(trainData$wday, levels = c(1:6,0), ordered = T, labels = c(\"월\",\"화\",\"수\",\"목\",\"금\",\"토\",\"일\"))\n## 시간\ntrainData$hour <- trainData$timestamp$hour\n\n\ntrainData$timestamp <- as.character(trainData$timestamp)\n\nIdWdayGroupBy <- group_by(trainData, wday)\nIdWdaySumm <- summarise(IdWdayGroupBy, x= length(timestamp))\n\nIdWdayArrange <- arrange(IdWdaySumm, desc(x))\n\n## 금요일 \n\n##################################################\n\ntimeGroupBy <- group_by(trainData, hour)\ntimeSumm <- summarise(timeGroupBy, x=length(timestamp))\n\ntimeArrange <- arrange(timeSumm, desc(x))\n\nhead(timeArrange)\n\n## 15 ~ 17시 사이\n\nlibrary(reshape)\n\nIdWday<- group_by(trainData, touristID, wday)\nIdWdaySumm <- summarise(IdWday, x = length(timestamp))\nhead(IdWdaySumm)\n\nIdWdayCast <- cast(IdWdaySumm, touristID~wday, value=\"x\", fun.aggregate = sum)\n\nhead(IdWdayCast)\n\n\nIdWdayCast$WeekDayCall <- apply(IdWdayCast[,2:6],1,sum)\n## 1 row   \n## 2 column \n## apply(array or matrix, 1:row / 2:column, FUN)\n\n?apply\n\nIdWdayCast$WeekendCall <- apply(IdWdayCast[,7:8],1, sum)\n\nhead(IdWdayCast)\n\n######################################################\n\ncityNationGroup <- group_by(trainData, city, nation)\ncityNationSumm <- summarise(cityNationGroup, x = length(timestamp))\n\nhead(cityNationSumm)\n\ncityNationCast <- cast(cityNationSumm, city~nation, value=\"x\", sum)\n\nhead(cityNationCast)\n\n## apply를 안할 경우 각 나라의 합계가 출력된다.\ncityNationCast$sum <- apply(cityNationCast[,2:11], 1, sum)\nhead(cityNationCast)\ncityNationCastPercent <- data.frame(cityNationCast$city, cityNationCast[,2:11] / cityNationCast$sum)\n\n#######################################################\n\nwdayCount <- function(x) {\n  count = 0\n  for (i in 1:length(x) ) {\n    if(x[i] > 0) count=count+1\n  }\n  return(count)\n}\n\n## Error 나는 유형\nIdWdayCast$wdayCount <- apply(IdWdayCast[,2:8], 1,wdayCount(x))\n\n## 정확한 유형\nIdWdayCast$wdayCount <- apply(IdWdayCast[,2:8], 1,function(x) wdayCount(x))\n\nhead(IdWdayCast)\ntail(IdWdayCast)\n",
    "created" : 1435984858829.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4058652576",
    "id" : "A03A285A",
    "lastKnownWriteTime" : 1436580762,
    "path" : "C:/RCodeRepositories/RSpclecture2/week2.R",
    "project_path" : "week2.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "type" : "r_source"
}