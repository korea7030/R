{
    "contents" : "library(dplyr)\nlibrary(lubridate)\n# install.packages(\"arules\")\nlibrary(arules)\n# install.packages(\"arulesViz\")\nlibrary(arulesViz)\n\n## 서울지역 그래프 그리기 위한 data 작업 시작 ##########################\ngroup_region <- group_by(merge_data2, 거주지역, 상품대분류명)\ngroup_region.summ <- summarize(group_region, sumAmount = sum(구매금액))\n\ngroup_region_buy <- group_by(merge_data2, 구매지역, 상품대분류명)\ngroup_region_buy.summ <- summarize(group_region_buy, sumAmount = sum(구매금액)) \n\nhead(group_region_buy.summ)\n\nunique(group_region.summ$거주지역)\ngroup_region.summ_seoul <- group_region.summ[substr(group_region.summ$거주지역, 1, 2)==\"서울\",]\ngroup_region_buy.summ.seoul <- group_region_buy.summ[substr(group_region_buy.summ$구매지역, 1,2)== \"서울\", ]\n\ngoo_nm <- unique(group_region.summ_seoul$거주지역)\ngoo_nm2 <- unique(group_region_buy.summ.seoul$구매지역) \n\nfor (i in 1:length(goo_nm)) {\n  assign(paste(\"group\",i,sep=\"\"), group_region.summ_seoul[group_region.summ_seoul$거주지역==goo_nm[i],], envir = .GlobalEnv)\n}\n\nfor (j in 1:length(goo_nm2)) {\n  assign(paste(\"group.buy\",j,sep=\"\"), group_region_buy.summ.seoul[group_region_buy.summ.seoul$구매지역 == goo_nm2[j],], envir=.GlobalEnv)\n}\n\n## 서울지역 그래프 그리기 위한 data 작업 끝 ##########################\n\n### 지역별 pie 그래프  함수 시작(거주지역, 구매지역) #########################################\noptions(scipen=999)\n\ncreatePlot <- function(goo_nm, text) { \n  for ( i in 1:length(goo_nm)) {\n    \n    data <- eval(parse(text=paste0(\"group\",i)))\n    filename <- paste(goo_nm[i],\"거주지역 금액.jpeg\" , sep=\" \")\n    \n    jpeg(filename = filename, width = 900, height = 700)\n    print ({\n      ggplot(data, aes(x = \"\", y = sumAmount , fill = 상품대분류명)) +\n        geom_bar(stat=\"identity\", position = \"fill\", width=1)+\n        coord_polar(theta=\"y\")+\n        ggtitle(paste(goo_nm[i], \"거주지역 금액\", sep=\" \"))+\n        theme(axis.text = element_blank(),\n              axis.ticks = element_blank(),\n              panel.grid  = element_blank(),\n              panel.background = element_blank())\n    })\n    dev.off()\n  }\n}\n\ncreatePlot2 <- function(goo_nm2, text) { \n  for ( i in 1:length(goo_nm2)) {\n    \n    data <- eval(parse(text=paste0(\"group\",i)))\n    filename <- paste(goo_nm2[i],\"구매지역 금액.jpeg\" , sep=\" \")\n    \n    jpeg(filename = filename, width = 900, height = 700)\n    print ({\n      ggplot(data, aes(x = \"\", y = sumAmount , fill = 상품대분류명)) +\n        geom_bar(stat=\"identity\", position = \"fill\", width=1)+\n        coord_polar(theta=\"y\")+\n        ggtitle(paste(goo_nm2[i], \"구매지역 금액\", sep=\" \"))+\n        theme(axis.text = element_blank(),\n              axis.ticks = element_blank(),\n              panel.grid  = element_blank(),\n              panel.background = element_blank())\n    })\n    dev.off()\n  }\n}\n### 지역별 pie 그래프  함수 끝(거주지역, 구매지역)#############################################\n\ncreatePlot(goo_nm, \"거주지역 금액.jpeg\")\ncreatePlot2(goo_nm2, \"구매지역 금액.jpeg\")\n\n####### 연령대, 구매월, 구매요일 변수 추가 및 그래프 시작 ####################################\nmerge_data2 <- within(merge_data2, {\n  연령대 = character(0)\n  연령대[ 연령  >= 50 & 연령 < 60] = \"50대\"\n  연령대[ 연령  >= 60 & 연령 < 70] = \"60대\"\n  연령대[ 연령  >= 70 & 연령 < 80] = \"70대\"\n  연령대[ 연령  >= 80 & 연령 < 90] = \"80대\"\n  연령대[ 연령  >= 90 & 연령 < 100] = \"90대\"\n  \n  # 연령대 = factor(연령, level=c(\"10대\",\"20대\",\"30대\",\"40대\",\"50대\",\"60대\",\"70대\",\"80대\",\"90대\"))\n})\n\n\nmerge_data2$구매월 <- month(merge_data2$구매일자)\nmerge_data2$구매요일 <- wday(merge_data2$구매일자, label=TRUE)\n\n\nhead(merge_data2)\nggplot(merge_data2, aes(구매월))+geom_bar()+facet_wrap(~성별)+ggtitle(\"성별 구매건수\")\nggplot(merge_data2, aes(구매월))+geom_bar()+facet_wrap(~연령대)+ggtitle(\"연령대 구매건수\")\nggplot(merge_data2, aes(구매월))+geom_bar()+facet_wrap(~성별+연령대)+ggtitle(\"성별/연령대 구매건수\")\nggplot(merge_data2, aes(구매월))+geom_bar()+facet_wrap(~연령대+성별)+ggtitle(\"연령대/성별 구매건수\")\n\n\nagg_dat <- aggregate(구매금액~ID+구매월, data=merge_data2, sum)\nggplot(agg_dat, aes(구매월, 구매금액)) + geom_boxplot(aes(group=구매월))\nggplot(subset(agg_dat, 구매금액 < 20000000), aes(구매월, 구매금액)) + geom_boxplot(aes(group=구매월))\n\nagg.summ <- aggregate(구매금액~구매요일, data=merge_data2, sum)\nggplot(data= agg.summ, aes(x=구매요일, y= 구매금액))+geom_bar(stat=\"identity\")\n\nggplot(merge_data2, aes(구매요일))+geom_bar()+facet_wrap(~성별)+ggtitle(\"성별 구매건수\")\nggplot(merge_data2, aes(구매요일))+geom_bar()+facet_wrap(~연령대)+ggtitle(\"연령대 구매건수\")\nggplot(merge_data2, aes(구매요일))+geom_bar()+facet_wrap(~성별+연령대)+ggtitle(\"성별/연령대 구매건수\")\nggplot(merge_data2, aes(구매요일))+geom_bar()+facet_wrap(~연령대+성별)+ggtitle(\"연령대/성별 구매건수\")\n####### 연령대, 구매월, 구매요일 변수 추가 및 그래프 끝 ####################################\n\n#################################### 연관분석 ID 기준(전체)#########################################\n\n\ngroup_mid <- gorup_by(merge_data2, ID, 상품중분류명) \ngroup_mid.summ <- summarize(group_mid, sumAmount = length(상품중분류명))\nhead(group_mid.summ)\n\ntmp_df <- group_mid.summ[,c(1,2)]\nhead(tmp_df)\n\ntmp_df.list <- split(tmp_df$상품중분류명, tmp_df$ID)\nhead(tmp_df.list)\n\ntmp_df.trans <- as(tmp_df.list, \"transactions\")\ntmp_df.trans\n\nsummary(tmp_df.trans)  \n\nimage(tmp_df.trans)\n\ntmp_df.rules <- apriori(tmp_df.trans)  ## support 와 confidence 가 default일때(0.1, 0.8) \ntmp_df.rules <- apriori(tmp_df.trans, parameter = list(minlen = 2, support = 0.2 , confidence = 0.6), control=list(verbose=F))\ntmp_df.rules.profood <- apriori(tmp_df.trans, parameter = list(minlen = 2, support = 0.2 , confidence = 0.6), control=list(verbose=F), appearance=list(rhs=\"가공식품\", default=\"lhs\"))\ntmp_df.rules.fcloth <- apriori(tmp_df.trans, parameter = list(minlen = 2, support = 0.2 , confidence = 0.6), control=list(verbose=F), appearance=list(rhs=\"여성용의류-SPA\", default=\"lhs\"))\n\n## 전체 데이터 중복 제거\nsubset.matrix.clust.full <- is.subset(tmp_df.rules, tmp_df.rules)\nsubset.matrix.clust.full[lower.tri(subset.matrix.clust.full, diag=T)] <- NA\nredundant.clust.full <- colSums(subset.matrix.clust.full, na.rm=T) >= 1\nwhich(redundant.clust.full)\n\ntmp_df.rules.pruned <- tmp_df.rules[!redundant.clust.full]\ninspect(tmp_df.rules.pruned)\n####\n\nsummary(tmp_df.rules)  \n# summary(tmp_df.rules.profood)\n# summary(tmp_df.rules.fcloth)\n# head(sort(tmp_df.rules, by=\"lift\"))\ninspect(tmp_df.rules.pruned, by=\"lift\")\ninspect(tmp_df.rules.profood, by=\"lift\")\ninspect(tmp_df.rules.fcloth, by=\"lift\")\n\n\n\nplot(tmp_df.rules.pruned)\nplot(tmp_df.rules.pruned, method=\"grouped\")\nplot(tmp_df.rules, method=\"graph\")\nplot(tmp_df.rules, method=\"graph\", control = list(type = \"items\"))\nplot(tmp_df.rules, method=\"paracoord\", control = list(reorder = TRUE))\n\n##################### 연관분석 ID기준(전체) 끝 #################################\n\n##################### RFM 데이터를 가지고 군집분석 시작########################\nload(file = \"RFM_data.RData\")\nhead(userRFM)\nhead(userRFM.with.data)\n\nuserRFM_split <- userRFM.with.data[,c(3,4,6,13)]\nhead(userRFM_split)\n\nkm <- kmeans(scale(userRFM_split[,-4]), 5)\nkm\n\nplot(recency~frequency, data=userRFM_split[,-4], pch=km$cluster, col= km$cluster)\ntext(userRFM_split$frequency, userRFM_split$recency, userRFM_split$grade, cex=0.8, col=km$cluster)\n\nplot(recency~monetary, data=userRFM_split[,-4], pch=km$cluster, col= km$cluster)\ntext(userRFM_split$monetary, userRFM_split$recency, userRFM_split$grade, cex=0.8, col=km$cluster)\n\nplot(monetary~frequency, data=userRFM_split[,-4], pch=km$cluster, col= km$cluster)\ntext(userRFM_split$frequency, userRFM_split$monetary, userRFM_split$grade, cex=0.8, col=km$cluster)\n##################### RFM 데이터를 가지고 군집분석 끝########################\n\n##################### 군집별로 데이터 나눈 후 연관분석 시작(군집별) #####################\nhead(userRFM.with.data)\nuserRFM.with.data.clust1 <- userRFM.with.data[userRFM.with.data$cluster == 1,]\nuserRFM.with.data.clust2 <- userRFM.with.data[userRFM.with.data$cluster == 2,]\nuserRFM.with.data.clust3 <- userRFM.with.data[userRFM.with.data$cluster == 3,]\nuserRFM.with.data.clust4 <- userRFM.with.data[userRFM.with.data$cluster == 4,]\nuserRFM.with.data.clust5 <- userRFM.with.data[userRFM.with.data$cluster == 5,]\n\ngroup.clust1 <- group_by(userRFM.with.data.clust1, ID, 상품중분류명)\ngroup.clust1.summ <- summarize(group.clust1, sumAmount = length(상품중분류명))\nhead(group.clust1.summ)\nclust1_df <- group.clust1.summ[,c(1,2)]\nclust1_df.list <- split(clust1_df$상품중분류명, clust1_df$ID)\nclust1_df.trans <- as(clust1_df.list, \"transactions\")\nsummary(clust1_df.trans)\nclust1_df.rules <- apriori(clust1_df.trans, parameter = list(minlen = 2, support = 0.2 , confidence = 0.8), control=list(verbose=F))\n\n## 중복 제거 \nsubset.matrix.clust1 <- is.subset(clust1_df.rules, clust1_df.rules)\nsubset.matrix.clust1[lower.tri(subset.matrix.clust1, diag=T)] <- NA\nredundant.clust1 <- colSums(subset.matrix.clust1, na.rm=T) >= 1\nwhich(redundant.clust1)\n\nclust1_df.rules.pruned <- clust1_df.rules[!redundant.clust1]\ninspect(clust1_df.rules.pruned)\n## \n\nsummary(clust1_df.rules.pruned)\ninspect(clust1_df.rules.pruned, by=\"lift\") \nplot(clust1_df.rules.pruned, method=\"grouped\")\n\n###############################################################################################################\n\ngroup.clust2 <- group_by(userRFM.with.data.clust2, ID, 상품중분류명)\ngroup.clust2.summ <- summarize(group.clust2, sumAmount = length(상품중분류명))\nhead(group.clust1.summ)\nclust2_df <- group.clust2.summ[,c(1,2)]\nclust2_df.list <- split(clust2_df$상품중분류명, clust2_df$ID)\nclust2_df.trans <- as(clust2_df.list, \"transactions\")\nsummary(clust2_df.trans)\nclust2_df.rules <- apriori(clust2_df.trans, parameter = list(minlen = 2, support = 0.8 , confidence = 0.4), control=list(verbose=F))\n\n## 중복 제거 \nsubset.matrix.clust2 <- is.subset(clust2_df.rules, clust2_df.rules)\nsubset.matrix.clust2[lower.tri(subset.matrix.clust2, diag=T)] <- NA\nredundant.clust2 <- colSums(subset.matrix.clust2, na.rm=T) >= 1\nwhich(redundant.clust2)\n\nclust2_df.rules.pruned <- clust2_df.rules[!redundant]\ninspect(clust2_df.rules.pruned)\n## \n\nsummary(clust2_df.rules.pruned)\ninspect(clust2_df.rules.pruned, by=\"lift\") \nplot(clust2_df.rules.pruned, method=\"grouped\")\n\n##############################################################################################################\n\ngroup.clust3 <- group_by(userRFM.with.data.clust3, ID, 상품중분류명)\ngroup.clust3.summ <- summarize(group.clust3, sumAmount = length(상품중분류명))\nhead(group.clust3.summ)\nclust3_df <- group.clust3.summ[,c(1,2)]\nclust3_df.list <- split(clust3_df$상품중분류명, clust3_df$ID)\nclust3_df.trans <- as(clust3_df.list, \"transactions\")\nsummary(clust3_df.trans)\nclust3_df.rules <- apriori(clust3_df.trans, parameter = list(support = 0.05 , confidence = 0.4), control=list(verbose=F))\n\n## 중복 제거 \nsubset.matrix.clust3 <- is.subset(clust3_df.rules, clust3_df.rules)\nsubset.matrix.clust3[lower.tri(subset.matrix.clust3, diag=T)] <- NA\nredundant.clust3 <- colSums(subset.matrix.clust3, na.rm=T) >= 1\nwhich(redundant.clust3)\n\nclust3_df.rules.pruned <- clust3_df.rules[!redundant.clust3]\ninspect(clust3_df.rules.pruned)\n## \n\nsummary(clust3_df.rules.pruned)\ninspect(clust3_df.rules.pruned, by=\"lift\") \nplot(clust3_df.rules.pruned, method=\"grouped\")\n\n###############################################################################################################\n\ngroup.clust4 <- group_by(userRFM.with.data.clust4, ID, 상품중분류명)\ngroup.clust4.summ <- summarize(group.clust4, sumAmount = length(상품중분류명))\nhead(group.clust4.summ)\nclust4_df <- group.clust4.summ[,c(1,2)]\nclust4_df.list <- split(clust4_df$상품중분류명, clust4_df$ID)\nclust4_df.trans <- as(clust4_df.list, \"transactions\")\nsummary(clust4_df.trans)\nclust4_df.rules <- apriori(clust4_df.trans, parameter = list(minlen = 2, support = 0.95, confidence = 0.2), control=list(verbose=F))\n\n## 중복 제거 \nsubset.matrix.clust4 <- is.subset(clust4_df.rules, clust4_df.rules)\nsubset.matrix.clust4[lower.tri(subset.matrix.clust4, diag=T)] <- NA\nredundant.clust4 <- colSums(subset.matrix.clust4, na.rm=T) >= 1\nwhich(redundant.clust4)\n\nclust4_df.rules.pruned <- clust4_df.rules[!redundant.clust4]\ninspect(clust4_df.rules.pruned)\n## \n\nsummary(clust4_df.rules.pruned)\ninspect(clust4_df.rules.pruned, by=\"lift\") \nplot(clust4_df.rules.pruned, method=\"grouped\")\n\n##############################################################################################################\ngroup.clust5 <- group_by(userRFM.with.data.clust5, ID, 상품중분류명)\ngroup.clust5.summ <- summarize(group.clust5, sumAmount = length(상품중분류명))\nhead(group.clust5.summ)\nclust5_df <- group.clust5.summ[,c(1,2)]\nclust5_df.list <- split(clust5_df$상품중분류명, clust5_df$ID)\nclust5_df.trans <- as(clust5_df.list, \"transactions\")\nsummary(clust5_df.trans)\nclust5_df.rules <- apriori(clust5_df.trans, parameter = list(minlen = 2, support = 0.2 , confidence = 0.8), control=list(verbose=F))\n\nsummary(clust1_df.rules)\ninspect(clust1_df.rules, by=\"lift\") \nplot(clust1_df.rules, method=\"grouped\")\n##############################################################################################\n##################### 군집별로 데이터 나눈 후 연관분석 끝(군집별) ################################",
    "created" : 1456733565192.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1969448928",
    "id" : "AB9A3ACB",
    "lastKnownWriteTime" : 1454043478,
    "path" : "~/카카오톡 받은 파일/lpoint_subject2/subject2_arules.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "type" : "r_source"
}