{
    "contents" : "trainData <- read.csv(\"data/trainData.csv\", stringsAsFactors = F, na.strings=\"NA\")\n\nhead(trainData,20)\n## 2. 통화량이 많은 관광객 상위 5명 ##\nTop5touristID_List <- aggregate(trainData$dateChar , by=list(trainData$touristID), FUN=length)\nhead(Top5touristID_List)\n\nTop5Order <- order(Top5touristID_List$x, decreasing=TRUE)\nhead(Top5touristID_List[Top5Order,],5)\n## tour000125 , tour001313 tour003314 , tour002587, tour005763 \n######################################\n\n## 3. 우리나라를 가장 많이 방문한 나라의 이름은? 1등방문객수 국가과 2등 방문객수 국가의 방문객수 차이는? \ntouristCount_List <- aggregate(trainData$dateChar, by=list(tourist=trainData$touristID, nation=trainData$nation), FUN=length)\nhead(touristCount_List)\nnationCount <- table(touristCount_List$nation)\nnationCount \n## China \n\ntourOrder <- order(touristCount_List$x, decreasing=TRUE)\nhead(touristCount_List[,,tourOrder],20)\n\ndiffCount <- aggregate(touristCount_List$x, by=list(touristCount_List$nation), FUN=sum)\nhead(diffCount)\n\ndiffCount[order(diffCount$x, decreasing=T),]\n\n## 35780 \n\n#######################################\n\n## 4. 해외여행객들의 통화건수가 가장 많은 요일은 무슨 요일\ntrainData$timestamp <- strptime(paste0(trainData$dateChar,\" \", trainData$timeChar),\n                                format=\"%Y/%m%d %H%M-%S\")\n\ntrainData[,\"wday\"] <- trainData$timestamp$wday\ntrainData[,\"hour\"] <- trainData$timestamp$hour\ntrainData$wday <- factor(trainData$wday, levels=c(1:6,0), ordered=T, labels = c(\"월\",\"화\",\"수\",\"목\",\"금\",\"토\",\"일\"))\nhead(trainData)\n\nmaxCallCount <- aggregate(trainData$timestamp, by=list(trainData$wday), FUN=length)\nhead(maxCallCount)\n\nmaxOrder <- order(maxCallCount$x, decreasing=T)\nmaxCallCount[order(maxOrder, decreasing=T),]\n\n## 금요일\n#######################################\n\n## 5. 해외여행객들의 통화가 가장 많이 발생하는 시간대는? \nhourCall <- aggregate(trainData$timestamp,by=list(hour=trainData$hour),FUN=length)\nhourCall\nplot(hourCall, type=\"l\")\n## 5~6 사이\n######################################\n\n## 6. 관광객 개인별 주중통화량과 주말통화건수를 합산한 컬럼을 포함하는 데이터프레임 작성\ntouristCall <- aggregate(trainData$timestamp, by=list(ID=trainData$touristID, wday=trainData$wday), FUN=length)\nhead(touristCall)\n\nlibrary(reshape)\ndataFrameCall <- cast(touristCall, ID ~ wday, value=\"x\", fun.aggregate=sum) \nhead(dataFrameCall)\n# weekdayCall 붙이기\ndataFrameCall[,\"weekdayCall\"] <- apply(dataFrameCall[,2:6],1,sum)\n# weekendCall 붙이기\ndataFrameCall[,\"weekendCall\"] <- apply(dataFrameCall[,7:8],1,sum)\nhead(dataFrameCall)\n\nsave(dataFrameCall, file=\"./data/weekData.RData\")\n\n######################################\n## 7 . 국내행정구역별로 해외방문객의 국가별 통화건수 비중을 데이터프레임으로 작성\nnationBycall <- aggregate(trainData$timestamp, by=list(city=trainData$city, nation=trainData$nation), FUN=length)\nhead(nationBycall)\ndataframetest$citySum <- cast(nationBycall, city~nation, value=\"x\", fun.aggregate=sum) \nhead(dataframetest)\n\ndataframetest$Percent <- data.frame(city=dataframetest$city,dataframetest[,2:11]/dataframetest$citySum)\nhead(dataframetest)\n\ndataframetest <- cast(nationBycall, city~nation, value=\"x\", fun.aggregate=sum) \nhead(dataframetest)\n\n######################################\n## order(wdayStat4Cast$timeSum, decreasing = TRUE)\n## aggregate(bikeDataFull$ride.time, by=list(wday=bikeDataFull$ride.wday), FUN=mean)\n\n## 번외 \n\nwdayCount <- function(x) {\n  count = 0\n  for(i in 1:length(x)) {\n    if(x[i] > 0) count = count +1 \n  }\n  return(count)\n}\n\ndataFrameCall$wdayCount <- apply(dataFrameCall[,2:8], 1, function(x) wdayCount(x))\ndataFrameCall\n##",
    "created" : 1431134638282.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "465854706",
    "id" : "8FF7645",
    "lastKnownWriteTime" : 1431138589,
    "path" : "~/R/20150509_R/20150502_R.R",
    "project_path" : "20150502_R.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}