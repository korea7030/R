{
    "contents" : "\n# midTerm Quiz Review\n\n\n0. 이 데이터는 가상으로 작성한 우리나라를 방문한 관광객의 해외 로밍통화 log\n   (call data record 라고도 합니다) 데이터 입니다.\n   \n   - 데이터의 한행은 통화나 SMS가 한통화 수신 혹은 발신되었음을 의미합니다.\n   - 고객 1명이 여러번의 통화를 발신 혹은 수신한 경우, 여러개의 통화레코드가 남을 수 있습니다.\n   \n```{r}\n# install.packages(\"dplyr\")\nlibrary(dplyr)\n# install.packages(\"data.table\")\nlibrary(data.table)\n# install.packages(\"sqldf\")\nlibrary(sqldf)\n```\n\n\n\n1. R-Studio에서 \"midterm\" 프로젝트를 생성하고,\n   trainData.csv파일을 프로젝트 폴더 하위에 data 서브디렉토리를 만들고,\n   그 서브디렉토리에 저장하시오.\n   \n2. 가장 통화량이 많은 관광객 상위 5명의 touristID는?\n   \n```{r}\nsystem.time(\ntrainData <- read.csv(\"./data/trainData.csv\", header=T, stringsAsFactors=F)\n)\n\nsystem.time(\nuniqIdAggr <- aggregate(trainData$dateChar,\n                        list(uniqId=trainData$touristID),\n                        FUN=length)\n)\n\nsystem.time(\norder <- order(uniqIdAggr$x, decreasing=T)\n)\nhead(uniqIdAggr[order,])\n```\n\n```{r dplyr version}\nstart.time <- Sys.time()\n  uniqId.groupby <- group_by(trainData, touristID)\n  uniqId.summarize <- summarize(uniqId.groupby, N=n())\n  head(uniqId.summarize)\n  uniqId.arrange <- arrange(uniqId.summarize, desc(N))\n  head(uniqId.arrange)\nend.time <- Sys.time()\n(duration <- end.time - start.time)\n```\n\n\n```{r data.table version}\nhead(trainData)\n\nstart.time <- Sys.time()\n  trainData.dt <- data.table(trainData)\n  head(trainData.dt)\n  setkey(trainData.dt, touristID, nation, city)\n\n  uniqId.dt <- trainData.dt[, .N, by=list(touristID) ]\n  head(uniqId.dt)\n\n  setorder(uniqId.dt, -N)\n\n  head(uniqId.dt)\n\nend.time <- Sys.time()\n(duration <- end.time - start.time)\n```\n\n\n\n3. 우리나라를 가장 많이 방문한 나라의 이름은?\n   1등 방문객수 국가와 2등 방문객수 국가의 방문객수 차이는 얼마인가요?\n   \n   주) 통화콜 수가 아니라 방문객수라는 점에 유의하시기 바랍니다.\n\n```{r}\nsystem.time(\nidNationAggr <- aggregate(trainData$dateChar,\n                        list(uniqId=trainData$touristID,\n                             nation=trainData$nation),\n                        FUN=length)\n)\nhead(idNationAggr)\ntable(idNationAggr$nation)\nhead(idNationAggr[order(idNationAggr$x, decreasing=T),],20)\n\n\nsystem.time(\nnationXAggr <- aggregate(idNationAggr$x,\n                        list(nation=idNationAggr$nation),\n                        FUN=sum)\n)\nnationXAggr[order(nationXAggr$x, decreasing=T),]\n```\n\n\n4. 해외여행객들의 통화건수가 가장 많은 요일은 무슨 요일 입니까?\n\n```{r}\nhead(trainData)\nstr(trainData)\nhead(paste0(trainData$dateChar,\" \", trainData$timeChar))\n\ntrainData$timestamp <- strptime(paste0(trainData$dateChar,\" \", trainData$timeChar),\n                                format=\"%Y/%m%d %H%M-%S\")\ntrainData$wday <- trainData$timestamp$wday\ntrainData$hour <- trainData$timestamp$hour\ntrainData$wday <- factor(trainData$wday, levels=c(1:6,0),\n                         ordered=T,\n                         labels=c(\"월\",\"화\",\"수\",\"목\",\"금\",\"토\",\"일\"))\n\ntail(trainData)\ntrainData$count <- 1\n\nsystem.time(\nwdayAggr <- aggregate(trainData$timestamp,\n                        list(wday=trainData$wday),\n                        FUN=length)\n)\n\nwdayAggr\n```\n\n5. 해외여행객들의 통화건수가 가장 많은 시간대는 어디입니까? \n```{r}\nsystem.time(\nhourAggr <- aggregate(trainData$timestamp,\n                        list(hour=trainData$hour),\n                        FUN=length)\n)\n\nunique(trainData$hour)\nhourAggr\n```\n\n6. 관광객 개인별 주중통화량과 주말통화건수를 합산한 데이터프레임을 \n   작성하는 코드를 적고,\n   결과물을 별도의 RData화일로 만들시오.\n   \n   - 컬럼명은 다음과 같이 만들어 주시기 바랍니다.\n     touristID, weekdayCall, weekendCall\n     \n```{r}\nsystem.time(\nidwdayAggr <- aggregate(trainData$timestamp,\n                        list(id=trainData$touristID,\n                             wday=trainData$wday),\n                        FUN=length)\n)\nhead(idwdayAggr)\n\n# install.packages(\"reshape\")\nlibrary(reshape)\nsystem.time(\nidwdayAggrCast <- cast(idwdayAggr, id ~ wday, value=\"x\", fun.aggregate=sum)\n)\n\nhead(idwdayAggrCast)\nidwdayAggrCast$weekdayCall <- apply(idwdayAggrCast[,2:6],1,sum)\nidwdayAggrCast$weekdendCall <- apply(idwdayAggrCast[,7:8],1,sum)\nhead(idwdayAggrCast)\n```\n\n\n7. 국내행정구역별로 해외방문객의 국가별 통화건수 비중을 데이터프레임으로 작성하시오.\n\n- hint : 행은 city, 열은 nation으로 작성하고, 각 city별로 합계를 구한 다음,\n  각 city별 nation의 수치를 합계로 나누면 비중이 나옵니다. \n\n```{r}\nsystem.time(\ncityNationAggr <- aggregate(trainData$timestamp,\n                        list(city=trainData$city,\n                             nation=trainData$nation),\n                        FUN=length)\n)\nhead(cityNationAggr)\n\nsystem.time(\ncityNationAggrCast <- cast(cityNationAggr, city ~ nation, value=\"x\", fun.aggregate=sum)\n)\ncityNationAggrCast\ncityNationAggrCast$sum <- apply(cityNationAggrCast[,2:11],1,sum)\ncityNationAggrCastPercent <- data.frame(city=cityNationAggrCast$city,\n                                        cityNationAggrCast[,2:11]/cityNationAggrCast$sum)\ncityNationAggrCastPercent\n\nsave(list=ls(), file=\"midtest_장운호_86204073.RData\") #약 6M정도의 파일이 작성됨.\n```\n\n\n8. save(list=ls(), file=\"midtest_이름_학번.RData\") 명령을 실행하여, 별도의\n파일로 작업했던 객체들을 저장하고, 저장된 객체 파일을 이메일로 \nunho.chang@gmail.com으로 제출 하시오.\n\n\n###번외퀴즈\n\n9. 관광객별로 통화가 발생했던 요일의 갯수는 각각 얼아인가요?\n\n   - 예를 들어 월화수 요일에 통화발신로그가 1개 이상씩 있다면, 3이 됩니다.\n    다시하나 예를 들어 드리면 월 화 목 금토에 통화 발신 로그가 있다면,\n    5가 됩니다.\n    \n```{r}\nhead(idwdayAggrCast)\n\nwdayCount <- function(x) {\n  count = 0\n  for (i in 1:length(x) ) {\n    if(x[i] > 0) count=count+1\n  }\n  return(count)\n}\n\nidwdayAggrCast$wdayCount <- apply(idwdayAggrCast[,2:8],1,function(x) wdayCount(x))\nhead(idwdayAggrCast);tail(idwdayAggrCast)\n```\n\n# SQL RODBC Code\n```{r}\n# install.packages(\"RODBC\")\nlibrary(RODBC)\n\ndb <- odbcConnect(\"lahman\", uid=\"root\", pwd=\"1234\")\n\nsqlTables(db) # sql의 show tables;와 동일한 명령어임.\n\ndf <- sqlQuery(db, \"SELECT * FROM allstarfull WHERE playerID='aaronha01'\")\ndf\n\nteam.df <- sqlQuery(db, \"SELECT * FROM teams\")\nhead(team.df)\nhead(team.df[team.df$yearID == 2013,])\n\nsal.df <- sqlQuery(db, \"SELECT * FROM salaries\")\nhead(sal.df)\nsal.df[sal.df$playerID == \"ryuhy01\",]\n\nbat.df <- sqlQuery(db, \"SELECT * FROM batting\")\nhead(bat.df)\nbat.df[bat.df$playerID == \"ryuhy01\",]\n\nmaster.df <- sqlQuery(db, \"SELECT * FROM master\")\nhead(master.df)\nmaster.df[master.df$playerID == \"ryuhy01\",]\nmaster.df[master.df$birthCountry == \"South Korea\",]\n\n## 항상 닫아줘야함 \nodbcClose(db)\n\n\n# odbcClose(db) ### 마지막에 연결을 닫아주는 것을 잊으면 절대안됨.\n\n```\n\n",
    "created" : 1431139532471.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "963103741",
    "id" : "E307B329",
    "lastKnownWriteTime" : 1431139706,
    "path" : "~/R/20150509_R/20150509_midterm_review.Rmd",
    "project_path" : "20150509_midterm_review.Rmd",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_markdown"
}