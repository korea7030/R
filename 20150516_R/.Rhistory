t.test(movie_2$total_seen, mu = 1500000, alter="greater")
library(dplyr)
customDb <- read.csv("customerDb.csv")
basketDb <- read.csv("basketData.csv")
View(basketDb)
View(customDb)
View(basketDb)
View(customDb)
str(customDb)
str(basketDb)
aggregate(basketDb$custId, by=list(basketDb$purchaseCount), FUN=sum)
aggregate(basketDb$custId, by=list(basketDb$purchaseCount), FUN=length)
aggregate(basketDb$custId, by=list(basketDb$purchaseCount), FUN=sum)
aggregate(basketDb$purchaseCount, by=list(basketDb$custId), FUN=sum)
costcust <- aggregate(basketDb$purchaseCount, by=list(basketDb$custId), FUN=sum)
head(costcust)
costorder <- order(costcust$x, decreasing=TRUE)
head(costorder)
head(costorder[,,costorder],20)
head(costcust[,,costorder],20)
head(costcust[,,costorder],6)
costorder <- order(costcust$x, decreasing=TRUE)
head(costorder)
head(costcust[,,costorder],6)
head(costcust)
head(costcust[,,costorder],6)
costorder <- order(costcust$x, decreasing=TRUE)
head(costcust[,,costorder],6)
costcust <- aggregate(basketDb$custId, by=list(basketDb$purchaseCount), FUN=sum)
costcust <- aggregate(basketDb$custId, by=list(basketDb$purchaseCount), FUN=length)
head(costcust)
costorder <- order(costcust$x, decreasing=TRUE)
head(costorder)
head(costcust[,,costorder],6)
costcust <- group_by(basketDb, custId)
costcust
head(costcust)
custbycost <- aggregate(costcust$custId, by=(list=costucst$amount), FUN=SUM)
custbycost <- aggregate(costcust$custId, by=(list=costucst$amount), FUN=sum)
custbycost <- aggregate(costcust$custId, by=(list=costucst$amount), FUN=length)
costcust <- group_by(basketDb, custId)
custbycost <- aggregate(costcust$custId, by=(list=costcust$amount), FUN=length)
custbycost <- aggregate(costcust$custId, by=list(costcust$amount), FUN=length)
custbycost
custbycost <- aggregate(costcust$amount, by=list(costcust$custId), FUN=length)
custbycost
head(custbycost)
order <- order(custbycost$x, decresing=TRUE)
order <- order(custbycost$x, decreasing=TRUE)
loyalCustomer <- summarize(costcust, sumAmount = sum(amount))
head(custbycost[,order], 10)
order <- order(custbycost$x, decreasing=TRUE)
head(custbycost[,order], 10)
custbycost <- aggregate(costcust$amount, by=list(costcust$custId), FUN=length)
head(custbycost)
loyalCustomer <- summarize(costcust, sumAmount = sum(amount))
loyalCustomer
loyalCustomer <- arrange(loyalCustomer, desc(sumAmount))
head(loyalCustomer)
head(custbycost[,order], 10)
order <- order(custbycost$x, decreasing=TRUE)
head(custbycost[,,order], 10)
head(custbycost[,,order], 10, decreasing=T)
order <- order(custbycost$x, decreasing=TRUE)
order
head(loyalCustomer)
head(basketDb)
branchData <- group_by(basketDb, branchId)
loyalBranch <- summarize(branchData, sumAmount = sum(amount))
head(loyalBranch)
loyalBranch <- arrange(loyalBranch, desc(sumAmount))
head(loyalBranch)
basketDb %>% groupby(branchId) %>% summarize(sumAmount=sum(amount)) %>% arrange(desc(sumAmount))
basketDb %>% group_by(branchId) %>% summarize(sumAmount=sum(amount)) %>% arrange(desc(sumAmount))
head(basketDb)
basketDb %>% groupby(branchId, date) %>% summarize(countDate = count(date))
basketDb %>% group_by(branchId, date) %>% summarize(countDate = count(date))
basketDb %>% group_by(branchId, custId) %>% summarize(countDate = count(date))
branchData <- group_by(basketDb, branchId, custId)
branchData
head(branchData)
n(branchData$date)
branchData$date
branchData <- group_by(basketDb, date)
head(branchData)
branchData <- group_by(basketDb, ,custId, date)
branchData <- group_by(basketDb, ,custId, date)
branchData <- group_by(basketDb, custId, date)
head(branchData)
branchData <- group_by(basketDb, custId, date, sumAmmount = sum(amount))
summarize(branchData=sum(amount))
basketDb %>% group_by(custId, date, sumAmount = sum(amount)) %>% group_by(custId, date) %>% summarize(dateCount=sum(date)) %>% arrange(desc(dateCount))
head(basketDb)
str(basketDb)
basketDb %>% group_by(custId, date, sumAmount = sum(amount)) %>%  summarize(dateAmount=sum(amount)) %>% group_by(custId,date) %>%  summarize(datecount=n())
basketDb %>% group_by(custId, date, sumAmount = sum(amount)) %>%  summarize(dateAmount=sum(amount)) %>% group_by(custId) %>%  summarize(datecount=n())
dateCount <- basketDb %>% group_by(custId, date, sumAmount = sum(amount)) %>%  summarize(dateAmount=sum(amount)) %>% group_by(custId) %>%  summarize(datecount=n())
head(dateCount)
customerCount <- left_join(dateCount, customDb)
customDb
customerCount <- left_join(dateCount, customDb)
dateCount <- basketDb %>% group_by(custId, date, sumAmount = sum(amount)) %>%  summarize(dateAmount=sum(amount)) %>% group_by(custId) %>%  summarize(datecount=n())
customerCount <- left_join(dateCount, customDb)
dateCount
dateCount <- basketDb %>% group_by(custId, date, sumAmount = sum(amount)) %>%  summarize(dateAmount=sum(amount)) %>% group_by(custId) %>%  summarize(dateCount=n())
head(dateCount)
customerCount <- left_join(dateCount, customDb)
customDb
customerCount <- left_join(dateCount, customDb)
customerCount <- left_join(dateCount, customDb)
customerCount
group_by(custId, date, sumAmount = sum(amount))
group_by(basketDb$custId, basketDb$date, sumAmount = sum(basketDb$amount))
group_by(basketDb$date, sumAmount = sum(basketDb$amount))
head(basketDb)
head(customDb)
basketDb$date <- as.Date(as.character(basketData$date), format="%Y%m%d")
basketDb$date <- as.Date(as.character(basketDb$date), format="%Y%m%d")
basketDb$date <- as.Date(as.character(basketDb$date), format="%Y%m%d")
basketDb$date <- as.numeric(basketDb$date)
basketDb$date
basketDb$date <- as.Date(as.character(basketDb$date), format="%Y%m%d")
basketDb$date <- as.numeric(basketDb$date)
basketDb$date
basketDb$date <- as.Date(as.character(basketDb$date), format="%Y%m%d")
basketDb$date
basketDb$date <- as.Date(as.character(basketDb$date), format="%Y%m%d")
basketDb$date
basketDb$date <- as.Date(as.character(basketDb$date), format="%Y%m%d")
basketDb$date
basketDb <- read.csv("basketData.csv")
basketDb$date
<- as.Date(as.character(basketDb$date), format="%Y%m%d")
as.Date(as.character(basketDb$date), format="%Y%m%d")
basketDb$date <- as.Date(as.character(basketDb$date), format="%Y%m%d")
basketDb$date
basketDb$date <- as.numeric(basketDb$date)
basketDb$date
groupbyDummy <- group_by(basketDb, custId, date)
head(groupbyDummy)
userFreq <- summarize(groupbyDummy, N=n())
userFreq
userF <- summarize(userFreq,frequency=n())
groupbyDummy <- group_by(basketDb, custId)
head(groupbyDummy)
userRFM <- summarize(groupbyDummy, minRecency=min(date),
recency=max(date),
monetary=sum(amount),
period=max(date)-min(date))
userRFM
userRFM <- left_join(userRFM, userF)
arrange(userRFM, desc(monetary))
userRFM <- as.Date(userRFM$minRecency, origin="1970-01-01")
userRFM <- left_join(userRFM, userF)
arrange(userRFM, desc(monetary))
arrange(userRFM, desc(monetary))
groupbyDummy <- group_by(basketDb, custId, date)
head(groupbyDummy)
userFreq <- summarize(groupbyDummy, N=n())
userFreq
userF <- summarize(userFreq,frequency=n())
userF
groupbyDummy <- group_by(basketDb, custId)
head(groupbyDummy)
userRFM <- summarize(groupbyDummy, minRecency=min(date),
recency=max(date),
monetary=sum(amount),
period=max(date)-min(date))
userRFM
userRFM <- left_join(userRFM, userF)
arrange(userRFM, desc(monetary))
userRFM <- userRFM <- [,-7]
userRFM <- userRFM[,-7]
userRFM$minDate <- as.Date(userRFM$minRecency, origin="1970-01-01")
userRFM$maxDate <- as.Date(userRFM$maxRecency, origin="1970-01-01")
head(userRFM)
userRFM$maxDate <- as.Date(userRFM$recency, origin="1970-01-01")
head(userRFM)
plot(table(userRFM$maxDate), main="Guest Recency")
plot(table(userRFM$frequency), main="Guest Frequency"0)
plot(table(userRFM$frequency), main="Guest Frequency")
quantile(userRFM$monetary, c(0.2, 0.4, 0.6, 0.8))
###################################
quantile(as.numeric(userRFM$maxDate), c(0.2, 0.4, 0.6, 0.8, 0.9))
sumM <- sum(userRFM$monetary[userRFM$monetary > quantile(userRFM$monetary, 0.8)])
sumM/sum(userRFM$monetary) # 65%로 가장 크다.
sumF <- sum(userRFM$monetary[userRFM$frequency > quantile(userRFM$frequency, 0.8)])
sumF/sum(userRFM$monetary) # 58%로 중간 수준이다.
sumR <- sum(userRFM$monetary[userRFM$recency > quantile(userRFM$recency, 0.8)])
sumR/sum(userRFM$monetary) # 43%로 가장 적다.
weightR <- sumR/(sumR + sumF + sumM)
weightF <- sumF/(sumR + sumF + sumM)
weightM <- sumM/(sumR + sumF + sumM)
(weightR <- sumR/(sumR + sumF + sumM))
(weightF <- sumF/(sumR + sumF + sumM))
(weightM <- sumM/(sumR + sumF + sumM))
quantM <- quantile(userRFM$monetary,c(0,0.2,0.4,0.6,0.8,1))
length(quantM)
quantM
quantR <- as.Date(quantile(as.numeric(userRFM$maxDate),c(0,0.2,0.4,0.6,0.8,1)),origin="1970-01-01")
quantR
quantF <- quantile(userRFM$frequency,c(0,0.2,0.4,0.6,0.8,1))
quantF
intervalGrade <- function(mainData, fileName, rfmName, quantileData) {
forLength <- dim(mainData)[1]
results <- rep(0, forLength)
for (i in 1:forLength) {
data <- eval(parse(text=paste0(fileName,"$",rfmName)))[i]
if (data >= quantileData[1] && data < quantileData[2] ) {
results[i] <- 1
} else if (data >= quantileData[2] && data < quantileData[3]) {
results[i] <- 2
} else if (data >= quantileData[3] && data < quantileData[4]) {
results[i] <- 3
} else if (data >= quantileData[4] && data < quantileData[5]) {
results[i] <- 4
} else { results[i] <- 5 }
}
return(results)
}
userRFM$R <- intervalGrade(userRFM, "userRFM", "maxDate", quantR )
userRFM$F <- intervalGrade(userRFM, "userRFM", "frequency", quantF )
userRFM$M <- intervalGrade(userRFM, "userRFM", "monetary", quantM )
head(userRFM)
userRFM$score <- (weightR * userRFM$R + weightF * userRFM$F + weightM * userRFM$M)*100/5
head(userRFM)
head(as.data.frame(userRFM)
)
hist(userRFM$score)
dim(userRFM)
(quantS <- quantile(userRFM$score,c(0,0.2,0.4,0.6,0.8,1)))
finalGrade <- function(mainData, fileName, rfmName, quantileData) {
forLength <- dim(mainData)[1]
results <- rep(0, forLength)
for (i in 1:forLength) {
data <- eval(parse(text=paste0(fileName,"$",rfmName)))[i]
if (data >= quantileData[1] && data < quantileData[2] ) {
results[i] <- "E"
} else if (data >= quantileData[2] && data < quantileData[3]) {
results[i] <- "D"
} else if (data >= quantileData[3] && data < quantileData[4]) {
results[i] <- "C"
} else if (data >= quantileData[4] && data < quantileData[5]) {
results[i] <- "B"
} else { results[i] <- "A" }
}
return(results)
}
userRFM$grade <- finalGrade(userRFM, "userRFM", "score", quantS )
head(userRFM)
str(userRFM)
head(as.data.frame(userRFM))
dim(userRFM[userRFM$grade == "A",])
AgradeCustomer <- userRFM[userRFM$grade == "A",]
head(AgradeCustomer)
head(as.data.frmae(AgradeCustomer))
head(as.data.frame(AgradeCustomer))
mergeA <- left_join(AgradeCustomer, customDb)
head(mergeA)
head(as.data.frame(mergeA))
table(mergeA$sex)
table(mergeA$city)
View(basketDb)
View(branchData)
View(costcust)
View(branchData)
userRFM <- left_join(userRFM, basketData)
library(dplyr)
userRFM <- left_join(userRFM, basketData)
rm(list=ls())
customerDb <- read.csv("customerDb.csv", stringsAsFactors=F)
basketData <- read.csv("basketData.csv", stringsAsFactors=F)
View(basketData)
View(customerDb)
costcust <- group_by(basketData, custId)
head(basketData)
head(customerDb)
basketData$date <- as.Date(as.character(basketData$date), format="%Y%m%d")
basketData$date <- as.numeric(basketData$date)
library(dplyr)
basketCustom <- left_join(basketData, customerDb)
View(basketCustom)
costcust <- group_by(basketCustom, custId)
groupbyDummy <- group_by(basketCustom, custId, date)
head(groupbyDummy)
userFreq <- summarize(groupbyDummy, N=n())
userFreq
userF <- summarize(userFreq,frequency=n())
userF
groupbyDummy <- group_by(basketCustom, custId)
head(groupbyDummy)
userRFM <- summarize(groupbyDummy, minRecency=min(date),
recency=max(date),
monetary=sum(amount),
period=max(date)-min(date))
userRFM
userRFM <- left_join(userRFM, userF)
head(userRFM);tail(userRFM)
arrange(userRFM, desc(monetary))
userRFM$minDate <- as.Date(userRFM$minRecency, origin="1970-01-01")
userRFM$maxDate <- as.Date(userRFM$recency, origin="1970-01-01")
hist(userRFM$maxDate, breaks=10)
length(unique(userRFM$maxDate))
hist(userRFM$monetary, breaks=100)
range(userRFM$monetary)
Recency
plot(table(userRFM$maxDate), main="Guests Recency")
quantile(userRFM$monetary, c(0.2,0.4,0.6,0.8))
quantile(as.numeric(userRFM$maxDate), c(0.2,0.4,0.6,0.8,0.9)) # 날짜를 numeric으로 바꾸면 분위수 계산이 가능해 진다.
sumM <- sum(userRFM$monetary[userRFM$monetary > quantile(userRFM$monetary, 0.8)])
sumM/sum(userRFM$monetary) # 65%로 가장 크다.
sumF <- sum(userRFM$monetary[userRFM$frequency > quantile(userRFM$frequency, 0.8)])
sumF/sum(userRFM$monetary) # 58%로 중간 수준이다.
as.Date(quantile(userRFM$recency,0.8), origin="1970-01-01")
head(as.numeric(userRFM$maxDate))
str(userRFM)
sumR <- sum(userRFM$monetary[userRFM$recency > quantile(userRFM$recency, 0.8)])
sumR <- sum(userRFM$monetary[userRFM$recency > quantile(userRFM$recency, 0.8)])
sumR/sum(userRFM$monetary) # 43%로 가장 적다.
weightR <- sumR/(sumR + sumF + sumM)
weightF <- sumF/(sumR + sumF + sumM)
weightM <- sumM/(sumR + sumF + sumM)
quantM <- quantile(userRFM$monetary,c(0,0.2,0.4,0.6,0.8,1))
quantR <- as.Date(quantile(as.numeric(userRFM$maxDate),c(0,0.2,0.4,0.6,0.8,1)),origin="1970-01-01")
quantF <- quantile(userRFM$frequency,c(0,0.2,0.4,0.6,0.8,1))
columnName <- paste0("userRFM","$","frequency")
eval(parse(text=columnName))[2] # 문자열 조합으로 데이터프레임의 열을 찾는 방법
intervalGrade <- function(mainData, fileName, rfmName, quantileData) {
forLength <- dim(mainData)[1]
results <- rep(0, forLength)
for (i in 1:forLength) {
data <- eval(parse(text=paste0(fileName,"$",rfmName)))[i]
if (data >= quantileData[1] && data < quantileData[2] ) {
results[i] <- 1
} else if (data >= quantileData[2] && data < quantileData[3]) {
results[i] <- 2
} else if (data >= quantileData[3] && data < quantileData[4]) {
results[i] <- 3
} else if (data >= quantileData[4] && data < quantileData[5]) {
results[i] <- 4
} else { results[i] <- 5 }
}
return(results)
}
userRFM$R <- intervalGrade(userRFM, "userRFM", "maxDate", quantR )
userRFM$F <- intervalGrade(userRFM, "userRFM", "frequency", quantF )
userRFM$M <- intervalGrade(userRFM, "userRFM", "monetary", quantM )
userRFM$score <- (weightR * userRFM$R + weightF * userRFM$F + weightM * userRFM$M)*100/5
(quantS <- quantile(userRFM$score,c(0,0.2,0.4,0.6,0.8,1)))
finalGrade <- function(mainData, fileName, rfmName, quantileData) {
forLength <- dim(mainData)[1]
results <- rep(0, forLength)
for (i in 1:forLength) {
data <- eval(parse(text=paste0(fileName,"$",rfmName)))[i]
if (data >= quantileData[1] && data < quantileData[2] ) {
results[i] <- "E"
} else if (data >= quantileData[2] && data < quantileData[3]) {
results[i] <- "D"
} else if (data >= quantileData[3] && data < quantileData[4]) {
results[i] <- "C"
} else if (data >= quantileData[4] && data < quantileData[5]) {
results[i] <- "B"
} else { results[i] <- "A" }
}
return(results)
}
userRFM$grade <- finalGrade(userRFM, "userRFM", "score", quantS )
head(as.data.frame(userRFM))
str(userRFM)
head(as.data.frame(userRFM))
View(userRFM)
userRFM <- left_join(userRFM, customerDb)
View(userRFM)
arrange(userRFM, desc(userRFM$score))
arrange(userRFM, desc(score))
View(userRFM)
userRFM <- arrange(userRFM, desc(score))
View(userRFM)
userRFM <- left_join(userRFM, basketData)
View(userRFM)
install.packages("sqldf")
library(sqldf)
getData <- sqldf("select custId,minRecency,recency,monetary,period,frequency,minDate, maxDate, score, sex, age, city,branchId,category,division  from userRFM")
View(getData)
summaryByCategory <-  summarize(getData, category = n())
summaryByCategory
View(summaryByCategory)
count()
summaryByCategory <-  summarize(getData, category = count(category))
summaryByCategory <-  summarize(getData, category = count(category))
