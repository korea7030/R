printSNAPlot2(jobemp_mat, "취업지원")
printSNAPlot2 <- function(mat_dat,title) {
# jpeg(paste0(title,".jpeg"), width = 800, height = 600)
# pdf.options(family = "Korea1deb")
g<- graph.data.frame(mat_dat, directed = FALSE)
g<- simplify(g)
V(g)$name <- colnames(mat_dat)
V(g)$label <- V(g)$name
print(V(g)$label)
btw <- betweenness(g) # SNA package(근접중심성)
btw.score <- round(btw)+1
# length(btw.score)
btw.colors <- rev(heat.colors(max(btw.score)))
V(g)$color <- btw.colors[btw.score]
# V(g)$size <- degree(g) # SNA package 차수
V(g)$size <- btw # SNA package 차수
print(V(g)$size)
V(g)$label.cex <- degree(g) / max(degree(g)) + 0.3
# set.seed(1234)
#   E(g)$label <- graph.strength(g)
#   E(g)$label.cex <- degree(g) / max(degree(g)) + 0.2
layout = layout.fruchterman.reingold(g)
# plot(g, edge.width = degree(g), layout=layout, main = title)
# plot(g, edge.width = degree(g), layout=layout, main = title)
gplot(g, displayLabels=T)
print (btw)
# dev.off()
}
printSNAPlot(jobemp_mat, "취업지원")
printSNAPlot2(jobemp_mat, "취업지원")
library(sna)
printSNAPlot2 <- function(mat_dat,title) {
# jpeg(paste0(title,".jpeg"), width = 800, height = 600)
# pdf.options(family = "Korea1deb")
g<- graph.data.frame(mat_dat, directed = FALSE)
g<- simplify(g)
V(g)$name <- colnames(mat_dat)
V(g)$label <- V(g)$name
print(V(g)$label)
btw <- betweenness(g) # SNA package(근접중심성)
btw.score <- round(btw)+1
# length(btw.score)
btw.colors <- rev(heat.colors(max(btw.score)))
V(g)$color <- btw.colors[btw.score]
# V(g)$size <- degree(g) # SNA package 차수
V(g)$size <- btw # SNA package 차수
print(V(g)$size)
V(g)$label.cex <- degree(g) / max(degree(g)) + 0.3
# set.seed(1234)
#   E(g)$label <- graph.strength(g)
#   E(g)$label.cex <- degree(g) / max(degree(g)) + 0.2
layout = layout.fruchterman.reingold(g)
# plot(g, edge.width = degree(g), layout=layout, main = title)
# plot(g, edge.width = degree(g), layout=layout, main = title)
gplot(g, displayLabels=T)
print (btw)
# dev.off()
}
printSNAPlot2(jobemp_mat, "취업지원")
library(igraph)
library(XLConnect)
printSNAPlot2(jobemp_mat, "취업지원")
printSNAPlot2 <- function(mat_dat,title) {
# jpeg(paste0(title,".jpeg"), width = 800, height = 600)
# pdf.options(family = "Korea1deb")
g<- graph.data.frame(mat_dat, directed = FALSE)
g<- simplify(g)
V(g)$name <- colnames(mat_dat)
V(g)$label <- V(g)$name
print(V(g)$label)
btw <- betweenness(g) # SNA package(근접중심성)
btw.score <- round(btw)+1
# length(btw.score)
btw.colors <- rev(heat.colors(max(btw.score)))
V(g)$color <- btw.colors[btw.score]
# V(g)$size <- degree(g) # SNA package 차수
V(g)$size <- btw # SNA package 차수
print(V(g)$size)
V(g)$label.cex <- degree(g) / max(degree(g)) + 0.3
# set.seed(1234)
#   E(g)$label <- graph.strength(g)
#   E(g)$label.cex <- degree(g) / max(degree(g)) + 0.2
layout = layout.fruchterman.reingold(g)
# plot(g, edge.width = degree(g), layout=layout, main = title)
plot(g, edge.width = degree(g), layout=layout, main = title)
# gplot(g, displayLabels=T)
print (btw)
# dev.off()
}
printSNAPlot2(jobemp_mat, "취업지원")
betweenness
printSNAPlot2 <- function(mat_dat,title) {
# jpeg(paste0(title,".jpeg"), width = 800, height = 600)
# pdf.options(family = "Korea1deb")
g<- graph.data.frame(mat_dat, directed = TRUE)
g<- simplify(g)
V(g)$name <- colnames(mat_dat)
V(g)$label <- V(g)$name
print(V(g)$label)
btw <- betweenness(g) # SNA package(근접중심성)
btw.score <- round(btw)+1
# length(btw.score)
btw.colors <- rev(heat.colors(max(btw.score)))
V(g)$color <- btw.colors[btw.score]
# V(g)$size <- degree(g) # SNA package 차수
V(g)$size <- btw # SNA package 차수
print(V(g)$size)
V(g)$label.cex <- degree(g) / max(degree(g)) + 0.3
# set.seed(1234)
#   E(g)$label <- graph.strength(g)
#   E(g)$label.cex <- degree(g) / max(degree(g)) + 0.2
layout = layout.fruchterman.reingold(g)
# plot(g, edge.width = degree(g), layout=layout, main = title)
plot(g, edge.width = degree(g), layout=layout, main = title)
# gplot(g, displayLabels=T)
print (btw)
# dev.off()
}
printSNAPlot2(jobemp_mat, "취업지원")
jobemp_engineer_mat <- getSeriesData_Matrix(jobemp_data, engineer)
printSNAPlot(jobemp_engineer_mat, "취업지원-공학계열")
printSNAPlot2(jobemp_engineer_mat, "취업지원-공학계열")
printSNAPlot2(jobemp_social_mat, "취업지원-인문사회계열")
printSNAPlot2(jobemp_artpsy_mat, "취업지원-예체능계열")
printSNAPlot2(jobemp_science_mat, "취업지원-자연과학계열")
printSNAPlot2(jobemp_science_mat, "취업지원-자연과학계열")
printSNAPlot2(jobemp_joby_mat, "취업지원-취업")
printSNAPlot2(jobemp_jobn_mat, "취업지원-미취업")
printSNAPlot2(jobemp_jobn_mat, "취업지원-미취업")
printSNAPlot2(jobemp_engineer_jobY_mat, "취업지원-취업_공학계열")
printSNAPlot2(jobemp_social_jobY_mat, "취업지원-취업_인문사회계열")
printSNAPlot2(jobemp_artpsy_jobY_mat, "취업지원-취업_예체능계열")
printSNAPlot2(jobemp_science_jobY_mat, "취업지원-취업_자연과학계열")
printSNAPlot2(jobemp_engineer_jobN_mat, "취업지원-미취업_공학계열")
printSNAPlot2(jobemp_social_jobN_mat, "취업지원-미취업_인문사회계열")
printSNAPlot2(jobemp_artpsy_jobN_mat, "취업지원-미취업_예체능계열")
printSNAPlot2(jobemp_science_jobN_mat, "취업지원-미취업_자연과학계열")
language_data <- language_data[-which(is.na(language_data$이름)), ]
language_data <- subset(language_data , !(학과 %in% except))
write.csv(file = "어학.csv", language_data)
write.csv(file = "어학.csv", language_data)
language <- loadWorkbook("language.xls")
language_data <- readWorksheet(language,1, check.names = FALSE)
head(language_data)
language_col <- colnames(language_data)
language_data <- language_data[-which(is.na(language_data$이름)), ]
language_data <- subset(language_data , !(학과 %in% except))
write.csv(file = "어학.csv", language_data)
language_mat <- getAllData_Matrix(language_data)
printSNAPlot2(language_mat, "어학")
all_modi_mat <- getAllData_Matrix(all_modi_data)
library(XLConnect)
library(igraph)
all_modi_mat <- getAllData_Matrix(all_modi_data)
write.csv(file="수정.csv", all_modi_mat)
degree(g)
degree(g)
library(igraph)
library(XLConnect)
printSNAPlot <- function(mat_dat,title) {
png(paste0(title,".jpeg"), width = 800, height = 600, res=300) # jpeg 저장위한 코드
# pdf.options(family = "Korea1deb")
g<- graph.data.frame(mat_dat, directed = FALSE) # 방향성 확인하시려면 directed 를 TRUE로 하시면 됩니다.
g<- simplify(g) # 자기자신을 가르키는 것 제외
V(g)$name <- colnames(mat_dat) # node의 이름 지정
V(g)$label <- V(g)$name # node의 label 지정
# print(V(g)$label)
btw <- betweenness(g) # SNA package(근접중심성)
btw.score <- round(btw)+1 # 근접중심성을 가지고 점수화
# length(btw.score)
btw.colors <- rev(heat.colors(max(btw.score))) # 색깔 지정
V(g)$color <- btw.colors[btw.score] # 색깔 넣기
# V(g)$size <- degree(g) # SNA package 차수
V(g)$size <- btw # SNA package 차수 # node의 크기를 중개중심성 점수로 대입
# print(V(g)$size)
V(g)$label.cex <- degree(g) / max(degree(g)) + 0.3 # label 크기 지정
set.seed(1234) # 일정한 graph를 그리기 위한 seed값 지정
E(g)$label <- graph.strength(g) # edge(선) 의 라벨을 지정
E(g)$label.cex <- degree(g) / max(degree(g)) + 0.2 # edge(선)의 라벨 크기를 지정
layout = layout.fruchterman.reingold(g) # layout 지정
plot(g, edge.width = degree(g), layout=layout, main = title) # graph 출력
# plot(g, edge.width = degree(g), layout=layout, main = title)
print (btw) # 중개중심성 출력
dev.off()
}
all_mat <- getAllData_Matrix(all_data)
printSNAPlot(all_mat, "전체")
printSNAPlot <- function(mat_dat,title) {
png(paste0(title,".jpeg"), width = 800, height = 600, res=45) # jpeg 저장위한 코드
# pdf.options(family = "Korea1deb")
g<- graph.data.frame(mat_dat, directed = FALSE) # 방향성 확인하시려면 directed 를 TRUE로 하시면 됩니다.
g<- simplify(g) # 자기자신을 가르키는 것 제외
V(g)$name <- colnames(mat_dat) # node의 이름 지정
V(g)$label <- V(g)$name # node의 label 지정
# print(V(g)$label)
btw <- betweenness(g) # SNA package(근접중심성)
btw.score <- round(btw)+1 # 근접중심성을 가지고 점수화
# length(btw.score)
btw.colors <- rev(heat.colors(max(btw.score))) # 색깔 지정
V(g)$color <- btw.colors[btw.score] # 색깔 넣기
# V(g)$size <- degree(g) # SNA package 차수
V(g)$size <- btw # SNA package 차수 # node의 크기를 중개중심성 점수로 대입
# print(V(g)$size)
V(g)$label.cex <- degree(g) / max(degree(g)) + 0.3 # label 크기 지정
set.seed(1234) # 일정한 graph를 그리기 위한 seed값 지정
E(g)$label <- graph.strength(g) # edge(선) 의 라벨을 지정
E(g)$label.cex <- degree(g) / max(degree(g)) + 0.2 # edge(선)의 라벨 크기를 지정
layout = layout.fruchterman.reingold(g) # layout 지정
plot(g, edge.width = degree(g), layout=layout, main = title) # graph 출력
# plot(g, edge.width = degree(g), layout=layout, main = title)
print (btw) # 중개중심성 출력
dev.off()
}
all_mat <- getAllData_Matrix(all_data)
printSNAPlot(all_mat, "전체")
printSNAPlot <- function(mat_dat,title) {
png(paste0(title,".jpeg"), width = 800, height = 600, res=45) # jpeg 저장위한 코드
# pdf.options(family = "Korea1deb")
g<- graph.data.frame(mat_dat, directed = FALSE) # 방향성 확인하시려면 directed 를 TRUE로 하시면 됩니다.
g<- simplify(g) # 자기자신을 가르키는 것 제외
V(g)$name <- colnames(mat_dat) # node의 이름 지정
V(g)$label <- V(g)$name # node의 label 지정
# print(V(g)$label)
btw <- betweenness(g) # SNA package(근접중심성)
btw.score <- round(btw)+1 # 근접중심성을 가지고 점수화
# length(btw.score)
btw.colors <- rev(heat.colors(max(btw.score))) # 색깔 지정
V(g)$color <- btw.colors[btw.score] # 색깔 넣기
V(g)$size <- degree(g) # SNA package 차수
# V(g)$size <- btw # SNA package 차수 # node의 크기를 중개중심성 점수로 대입
# print(V(g)$size)
V(g)$label.cex <- degree(g) / max(degree(g)) + 0.3 # label 크기 지정
set.seed(1234) # 일정한 graph를 그리기 위한 seed값 지정
E(g)$label <- graph.strength(g) # edge(선) 의 라벨을 지정
E(g)$label.cex <- degree(g) / max(degree(g)) + 0.2 # edge(선)의 라벨 크기를 지정
layout = layout.fruchterman.reingold(g) # layout 지정
plot(g, edge.width = degree(g), layout=layout, main = title) # graph 출력
# plot(g, edge.width = degree(g), layout=layout, main = title)
print (btw) # 중개중심성 출력
dev.off()
}
all_mat <- getAllData_Matrix(all_data)
printSNAPlot(all_mat, "전체")
printSNAPlot <- function(mat_dat,title) {
png(paste0(title,".png"), width = 800, height = 600, res=45) # jpeg 저장위한 코드
# pdf.options(family = "Korea1deb")
g<- graph.data.frame(mat_dat, directed = FALSE) # 방향성 확인하시려면 directed 를 TRUE로 하시면 됩니다.
g<- simplify(g) # 자기자신을 가르키는 것 제외
V(g)$name <- colnames(mat_dat) # node의 이름 지정
V(g)$label <- V(g)$name # node의 label 지정
# print(V(g)$label)
btw <- betweenness(g) # SNA package(근접중심성)
btw.score <- round(btw)+1 # 근접중심성을 가지고 점수화
# length(btw.score)
btw.colors <- rev(heat.colors(max(btw.score))) # 색깔 지정
V(g)$color <- btw.colors[btw.score] # 색깔 넣기
V(g)$size <- degree(g) # SNA package 차수
# V(g)$size <- btw # SNA package 차수 # node의 크기를 중개중심성 점수로 대입
# print(V(g)$size)
V(g)$label.cex <- degree(g) / max(degree(g)) + 0.3 # label 크기 지정
set.seed(1234) # 일정한 graph를 그리기 위한 seed값 지정
E(g)$label <- graph.strength(g) # edge(선) 의 라벨을 지정
E(g)$label.cex <- degree(g) / max(degree(g)) + 0.2 # edge(선)의 라벨 크기를 지정
layout = layout.fruchterman.reingold(g) # layout 지정
plot(g, edge.width = degree(g), layout=layout, main = title) # graph 출력
# plot(g, edge.width = degree(g), layout=layout, main = title)
print (btw) # 중개중심성 출력
dev.off()
}
all_mat <- getAllData_Matrix(all_data)
printSNAPlot(all_mat, "전체")
printSNAPlot <- function(mat_dat,title) {
png(paste0(title,".png"), width = 800, height = 600, res=45) # jpeg 저장위한 코드
# pdf.options(family = "Korea1deb")
g<- graph.data.frame(mat_dat, directed = FALSE) # 방향성 확인하시려면 directed 를 TRUE로 하시면 됩니다.
g<- simplify(g) # 자기자신을 가르키는 것 제외
V(g)$name <- colnames(mat_dat) # node의 이름 지정
V(g)$label <- V(g)$name # node의 label 지정
# print(V(g)$label)
btw <- betweenness(g) # SNA package(근접중심성)
btw.score <- round(btw)+1 # 근접중심성을 가지고 점수화
# length(btw.score)
btw.colors <- rev(heat.colors(max(btw.score))) # 색깔 지정
V(g)$color <- btw.colors[btw.score] # 색깔 넣기
# V(g)$size <- degree(g) # SNA package 차수
V(g)$size <- btw # SNA package 차수 # node의 크기를 중개중심성 점수로 대입
# print(V(g)$size)
V(g)$label.cex <- degree(g) / max(degree(g)) + 0.3 # label 크기 지정
set.seed(1234) # 일정한 graph를 그리기 위한 seed값 지정
E(g)$label <- graph.strength(g) # edge(선) 의 라벨을 지정
E(g)$label.cex <- degree(g) / max(degree(g)) + 0.2 # edge(선)의 라벨 크기를 지정
layout = layout.fruchterman.reingold(g) # layout 지정
plot(g, edge.width = degree(g), layout=layout, main = title) # graph 출력
# plot(g, edge.width = degree(g), layout=layout, main = title)
print (btw) # 중개중심성 출력
dev.off()
}
all_mat <- getAllData_Matrix(all_data)
printSNAPlot(all_mat, "전체")
printSNAPlot <- function(mat_dat,title) {
png(paste0(title,".png"), width = 800, height = 600, res=45) # jpeg 저장위한 코드
# pdf.options(family = "Korea1deb")
g<- graph.data.frame(mat_dat, directed = FALSE) # 방향성 확인하시려면 directed 를 TRUE로 하시면 됩니다.
g<- simplify(g) # 자기자신을 가르키는 것 제외
V(g)$name <- colnames(mat_dat) # node의 이름 지정
V(g)$label <- V(g)$name # node의 label 지정
# print(V(g)$label)
btw <- betweenness(g) # SNA package(근접중심성)
btw.score <- round(btw)+1 # 근접중심성을 가지고 점수화
# length(btw.score)
btw.colors <- rev(heat.colors(max(btw.score))) # 색깔 지정
V(g)$color <- btw.colors[btw.score] # 색깔 넣기
V(g)$size <- degree(g) # SNA package 차수
# V(g)$size <- btw # SNA package 차수 # node의 크기를 중개중심성 점수로 대입
# print(V(g)$size)
V(g)$label.cex <- degree(g) / max(degree(g)) + 0.3 # label 크기 지정
set.seed(1234) # 일정한 graph를 그리기 위한 seed값 지정
E(g)$label <- graph.strength(g) # edge(선) 의 라벨을 지정
E(g)$label.cex <- degree(g) / max(degree(g)) + 0.2 # edge(선)의 라벨 크기를 지정
layout = layout.fruchterman.reingold(g) # layout 지정
plot(g, edge.width = degree(g), layout=layout, main = title) # graph 출력
# plot(g, edge.width = degree(g), layout=layout, main = title)
print (btw) # 중개중심성 출력
dev.off()
}
all_mat <- getAllData_Matrix(all_data)
printSNAPlot(all_mat, "전체")
all_engineer_mat <- getSeriesData_Matrix(all_data, engineer)
printSNAPlot(all_engineer_mat, "전체-공학계열")
all_social_mat <- getSeriesData_Matrix(all_data, social)
printSNAPlot(all_social_mat, "전체-인문사회계열")
all_artpsy_mat <- getSeriesData_Matrix(all_data, art_psy)
printSNAPlot(all_artpsy_mat, "전체-예체능계열")
all_science_mat <- getSeriesData_Matrix(all_data, science)
printSNAPlot(all_science_mat, "전체-자연과학계열")
all_joby_mat <- getJobYnData_Matrix(all_data, jobY)
printSNAPlot(all_joby_mat, "전체-취업")
all_jobn_mat <- getJobYnData_Matrix(all_data, jobN)
printSNAPlot(all_jobn_mat, "전체-미취업")
printSNAPlot <- function(mat_dat,title) {
png(paste0(title,".png"), width = 800, height = 600, res=80) # jpeg 저장위한 코드
# pdf.options(family = "Korea1deb")
g<- graph.data.frame(mat_dat, directed = FALSE) # 방향성 확인하시려면 directed 를 TRUE로 하시면 됩니다.
g<- simplify(g) # 자기자신을 가르키는 것 제외
V(g)$name <- colnames(mat_dat) # node의 이름 지정
V(g)$label <- V(g)$name # node의 label 지정
# print(V(g)$label)
btw <- betweenness(g) # SNA package(근접중심성)
btw.score <- round(btw)+1 # 근접중심성을 가지고 점수화
# length(btw.score)
btw.colors <- rev(heat.colors(max(btw.score))) # 색깔 지정
V(g)$color <- btw.colors[btw.score] # 색깔 넣기
V(g)$size <- degree(g) # SNA package 차수
# V(g)$size <- btw # SNA package 차수 # node의 크기를 중개중심성 점수로 대입
# print(V(g)$size)
V(g)$label.cex <- degree(g) / max(degree(g)) + 0.3 # label 크기 지정
set.seed(1234) # 일정한 graph를 그리기 위한 seed값 지정
E(g)$label <- graph.strength(g) # edge(선) 의 라벨을 지정
E(g)$label.cex <- degree(g) / max(degree(g)) + 0.2 # edge(선)의 라벨 크기를 지정
layout = layout.fruchterman.reingold(g) # layout 지정
plot(g, edge.width = degree(g), layout=layout, main = title) # graph 출력
# plot(g, edge.width = degree(g), layout=layout, main = title)
print (btw) # 중개중심성 출력
dev.off()
}
all_mat <- getAllData_Matrix(all_data)
printSNAPlot(all_mat, "전체")
printSNAPlot <- function(mat_dat,title) {
png(paste0(title,".png"), width = 800, height = 600, res=100) # jpeg 저장위한 코드
# pdf.options(family = "Korea1deb")
g<- graph.data.frame(mat_dat, directed = FALSE) # 방향성 확인하시려면 directed 를 TRUE로 하시면 됩니다.
g<- simplify(g) # 자기자신을 가르키는 것 제외
V(g)$name <- colnames(mat_dat) # node의 이름 지정
V(g)$label <- V(g)$name # node의 label 지정
# print(V(g)$label)
btw <- betweenness(g) # SNA package(근접중심성)
btw.score <- round(btw)+1 # 근접중심성을 가지고 점수화
# length(btw.score)
btw.colors <- rev(heat.colors(max(btw.score))) # 색깔 지정
V(g)$color <- btw.colors[btw.score] # 색깔 넣기
V(g)$size <- degree(g) # SNA package 차수
# V(g)$size <- btw # SNA package 차수 # node의 크기를 중개중심성 점수로 대입
# print(V(g)$size)
V(g)$label.cex <- degree(g) / max(degree(g)) + 0.3 # label 크기 지정
set.seed(1234) # 일정한 graph를 그리기 위한 seed값 지정
E(g)$label <- graph.strength(g) # edge(선) 의 라벨을 지정
E(g)$label.cex <- degree(g) / max(degree(g)) + 0.2 # edge(선)의 라벨 크기를 지정
layout = layout.fruchterman.reingold(g) # layout 지정
plot(g, edge.width = degree(g), layout=layout, main = title) # graph 출력
# plot(g, edge.width = degree(g), layout=layout, main = title)
print (btw) # 중개중심성 출력
dev.off()
}
all_mat <- getAllData_Matrix(all_data)
printSNAPlot(all_mat, "전체")
printSNAPlot <- function(mat_dat,title) {
png(paste0(title,".png"), width = 800, height = 600, res=90) # jpeg 저장위한 코드
# pdf.options(family = "Korea1deb")
g<- graph.data.frame(mat_dat, directed = FALSE) # 방향성 확인하시려면 directed 를 TRUE로 하시면 됩니다.
g<- simplify(g) # 자기자신을 가르키는 것 제외
V(g)$name <- colnames(mat_dat) # node의 이름 지정
V(g)$label <- V(g)$name # node의 label 지정
# print(V(g)$label)
btw <- betweenness(g) # SNA package(근접중심성)
btw.score <- round(btw)+1 # 근접중심성을 가지고 점수화
# length(btw.score)
btw.colors <- rev(heat.colors(max(btw.score))) # 색깔 지정
V(g)$color <- btw.colors[btw.score] # 색깔 넣기
V(g)$size <- degree(g) # SNA package 차수
# V(g)$size <- btw # SNA package 차수 # node의 크기를 중개중심성 점수로 대입
# print(V(g)$size)
V(g)$label.cex <- degree(g) / max(degree(g)) + 0.3 # label 크기 지정
set.seed(1234) # 일정한 graph를 그리기 위한 seed값 지정
E(g)$label <- graph.strength(g) # edge(선) 의 라벨을 지정
E(g)$label.cex <- degree(g) / max(degree(g)) + 0.2 # edge(선)의 라벨 크기를 지정
layout = layout.fruchterman.reingold(g) # layout 지정
plot(g, edge.width = degree(g), layout=layout, main = title) # graph 출력
# plot(g, edge.width = degree(g), layout=layout, main = title)
print (btw) # 중개중심성 출력
dev.off()
}
all_mat <- getAllData_Matrix(all_data)
printSNAPlot(all_mat, "전체")
printSNAPlot <- function(mat_dat,title) {
png(paste0(title,".png"), width = 800, height = 600, res=85) # jpeg 저장위한 코드
# pdf.options(family = "Korea1deb")
g<- graph.data.frame(mat_dat, directed = FALSE) # 방향성 확인하시려면 directed 를 TRUE로 하시면 됩니다.
g<- simplify(g) # 자기자신을 가르키는 것 제외
V(g)$name <- colnames(mat_dat) # node의 이름 지정
V(g)$label <- V(g)$name # node의 label 지정
# print(V(g)$label)
btw <- betweenness(g) # SNA package(근접중심성)
btw.score <- round(btw)+1 # 근접중심성을 가지고 점수화
# length(btw.score)
btw.colors <- rev(heat.colors(max(btw.score))) # 색깔 지정
V(g)$color <- btw.colors[btw.score] # 색깔 넣기
V(g)$size <- degree(g) # SNA package 차수
# V(g)$size <- btw # SNA package 차수 # node의 크기를 중개중심성 점수로 대입
# print(V(g)$size)
V(g)$label.cex <- degree(g) / max(degree(g)) + 0.3 # label 크기 지정
set.seed(1234) # 일정한 graph를 그리기 위한 seed값 지정
E(g)$label <- graph.strength(g) # edge(선) 의 라벨을 지정
E(g)$label.cex <- degree(g) / max(degree(g)) + 0.2 # edge(선)의 라벨 크기를 지정
layout = layout.fruchterman.reingold(g) # layout 지정
plot(g, edge.width = degree(g), layout=layout, main = title) # graph 출력
# plot(g, edge.width = degree(g), layout=layout, main = title)
print (btw) # 중개중심성 출력
dev.off()
}
all_mat <- getAllData_Matrix(all_data)
printSNAPlot(all_mat, "전체")
all_engineer_mat <- getSeriesData_Matrix(all_data, engineer)
printSNAPlot(all_engineer_mat, "전체-공학계열")
all_social_mat <- getSeriesData_Matrix(all_data, social)
printSNAPlot(all_social_mat, "전체-인문사회계열")
all_artpsy_mat <- getSeriesData_Matrix(all_data, art_psy)
printSNAPlot(all_artpsy_mat, "전체-예체능계열")
all_science_mat <- getSeriesData_Matrix(all_data, science)
printSNAPlot(all_science_mat, "전체-자연과학계열")
all_joby_mat <- getJobYnData_Matrix(all_data, jobY)
printSNAPlot(all_joby_mat, "전체-취업")
all_jobn_mat <- getJobYnData_Matrix(all_data, jobN)
printSNAPlot(all_jobn_mat, "전체-미취업")
all_engineer_jobY_mat <- getSeriesJobYnData_Matrix(all_data, engineer, jobY)
printSNAPlot(all_engineer_jobY_mat, "전체-취업_공학계열")
all_social_jobY_mat <- getSeriesJobYnData_Matrix(all_data, social, jobY)
printSNAPlot(all_social_jobY_mat, "전체-취업_인문사회계열")
all_artpsy_jobY_mat <- getSeriesJobYnData_Matrix(all_data, art_psy, jobY)
printSNAPlot(all_artpsy_jobY_mat, "전체-취업_예체능계열")
all_science_jobY_mat <- getSeriesJobYnData_Matrix(all_data, science, jobY)
printSNAPlot(all_science_jobY_mat, "전체-취업_자연과학계열")
all_engineer_jobN_mat <- getSeriesJobYnData_Matrix(all_data, engineer, jobN)
printSNAPlot(all_engineer_jobN_mat, "전체-미취업_공학계열")
all_social_jobN_mat <- getSeriesJobYnData_Matrix(all_data, social, jobN)
printSNAPlot(all_social_jobN_mat, "전체-미취업_인문사회계열")
all_artpsy_jobN_mat <- getSeriesJobYnData_Matrix(all_data, art_psy, jobN)
printSNAPlot(all_artpsy_jobN_mat, "전체-미취업_예체능계열")
all_science_jobN_mat <- getSeriesJobYnData_Matrix(all_data, science, jobN)
printSNAPlot(all_science_jobN_mat, "전체-미취업_자연과학계열")
jobemp_mat <- getAllData_Matrix(jobemp_data)
printSNAPlot(jobemp_mat, "취업지원")
jobemp_engineer_mat <- getSeriesData_Matrix(jobemp_data, engineer)
printSNAPlot(jobemp_engineer_mat, "취업지원-공학계열")
jobemp_social_mat <- getSeriesData_Matrix(jobemp_data, social)
printSNAPlot(jobemp_social_mat, "취업지원-인문사회계열")
jobemp_artpsy_mat <- getSeriesData_Matrix(jobemp_data, art_psy)
printSNAPlot(jobemp_artpsy_mat, "취업지원-예체능계열")
jobemp_science_mat <- getSeriesData_Matrix(jobemp_data, science)
printSNAPlot(jobemp_science_mat, "취업지원-자연과학계열")
# Job 별
jobemp_joby_mat <- getJobYnData_Matrix(jobemp_data, jobY)
printSNAPlot(jobemp_joby_mat, "취업지원-취업")
jobemp_jobn_mat <- getJobYnData_Matrix(jobemp_data, jobN)
printSNAPlot(jobemp_jobn_mat, "취업지원-미취업")
jobemp_jobn_mat <- getJobYnData_Matrix(jobemp_data, jobN)
printSNAPlot(jobemp_jobn_mat, "취업지원-미취업")
jobemp_engineer_jobY_mat <- getSeriesJobYnData_Matrix(jobemp_data, engineer, jobY)
printSNAPlot(jobemp_engineer_jobY_mat, "취업지원-취업_공학계열")
jobemp_social_jobY_mat <- getSeriesJobYnData_Matrix(jobemp_data, social, jobY)
printSNAPlot(jobemp_social_jobY_mat, "취업지원-취업_인문사회계열")
jobemp_artpsy_jobY_mat <- getSeriesJobYnData_Matrix(jobemp_data, art_psy, jobY)
printSNAPlot(jobemp_artpsy_jobY_mat, "취업지원-취업_예체능계열")
jobemp_science_jobY_mat <- getSeriesJobYnData_Matrix(jobemp_data, science, jobY)
printSNAPlot(jobemp_science_jobY_mat, "취업지원-취업_자연과학계열")
jobemp_engineer_jobN_mat <- getSeriesJobYnData_Matrix(jobemp_data, engineer, jobN)
printSNAPlot(jobemp_engineer_jobN_mat, "취업지원-미취업_공학계열")
jobemp_social_jobN_mat <- getSeriesJobYnData_Matrix(jobemp_data, social, jobN)
printSNAPlot(jobemp_social_jobN_mat, "취업지원-미취업_인문사회계열")
jobemp_artpsy_jobN_mat <- getSeriesJobYnData_Matrix(jobemp_data, art_psy, jobN)
printSNAPlot(jobemp_artpsy_jobN_mat, "취업지원-미취업_예체능계열")
jobemp_science_jobN_mat <- getSeriesJobYnData_Matrix(jobemp_data, science, jobN)
printSNAPlot(jobemp_science_jobN_mat, "취업지원-미취업_자연과학계열")
