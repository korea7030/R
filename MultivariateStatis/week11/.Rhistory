install.packages('ISLR')
library(ISLR)
boxplot(balance~default, data=Default)
boxplot(income~default, data=Default)
glm.fit = glm(default~balance, data=Default, family="binomial")
summary(glm.fit)
predict(glm.fit, data.frame(balance=1000))
a < predict(glm.fit, data.frame(balance=1000))
a <- predict(glm.fit, data.frame(balance=1000))
exp(a) / (1+exp(a))
a <- predict(glm.fit, data.frame(balance=1000), type="response")
a <- predict(glm.fit, data.frame(balance=1000))
predict(glm.fit, data.frame(balance=1000), type="response")
glm.fit2 = glm(default~balance+income+student, data=Default, family="binomial")
summary(glm.fit2)
exp(-6.468e-01)
glm.fit3 = glm(default~student, data=Default, family="binomial")
summary(glm.fit3)
exp(0.40489)
boxplot(balance~student)
boxplot(balance~student, data=Default)
anova(gfm.fit2, glm.fit, test="Chisq")
anova(glm.fit2, glm.fit, test="Chisq")
coupon= read.csv("coupon.csv")
head(coupon)
?glm
glm.fit4 <- glm(cbind(N_redeemd, N-N_redeemed~)
glm.fit4 <- glm(cbind(N_redeemd, N-N_redeemed)~)
glm.fit4 <- glm(cbind(N_redeemd, N-N_redeemed)~))
glm.fit4 <- glm(cbind(N_redeemd, N-N_redeemed)~Price_reduc, data=coupon, family="binomial")
head(coupon)
glm.fit4 <- glm(cbind(N_redeemed, N-N_redeemed)~Price_reduc, data=coupon, family="binomial")
summary(glm.fit4)
exp(0.096834)
exp(0.096834*5) ## 액면가가 5불 증가할 때
head(Smarket)
glm.smarket <- glm(Direction ~ Lag1+Lag2+Lag3+Lag4+Lag5+Volume, data=Smarket)
glm.smarket <- glm(Direction ~ Lag1+Lag2+Lag3+Lag4+Lag5+Volume, data=Smarket, family="binomial")
summary(glm.smarket)
which(is.na(Smarket))
exp(-0.073074 * 0.01)
exp(-0.042301 * 0.01)
exp(0.011085 * 0.01)
exp(0.009359 * 0.01)
exp(0.010313 * 0.01)
exp(0.135441 * 0.01)
exp(0.135441)
exp(0.011085 * 0.01)
exp(0.011085)
exp(-0.126000)
exp(-0.126000 * 0.01)
exp(-0.126000)
exp(0.009359 * 0.01)
exp(0.009359)
exp(0.009359 * 0.01)
exp(0.010313 * 0.01)
exp(0.010313)
summary(glm.smarket)
exp(0.135441)
head(Smarket)
summary(glm.smarket)
str(Smarket)
str(Smarket)
relevel(Smarket$Direction, ref="Up")
str(Smarket)
relevel(Smarket$Direction)
relevel(Smarket$Direction, ref="Down")
str(Smarket)
relevels(Smarket$Direction, ref="Up")
relevels(Smarket$Direction)
relevel(Smarket$Direction, ref="Up")
str(Smarket)
a <- relevel(Smarket$Direction, ref="Up")
levels(a)
Smarket$Direction <- relevel(Smarket$Direction, ref="Up")
str(Smarket)
Smarket$Direction <- relevel(Smarket$Direction, ref="Down")
str(Smarket)
str(glm.fit2)
glm.fit2$fitted.values
plot(default~balance)
plot(default~balance, data = Default)
plot(as.numeric(default)~balance, data = Default)
plot(as.numeric(default) -1~balance, data = Default)
points(Default$balance, glm.fit2$fitted.values, col=2)
pred <- data.frame(Default$default, glm.fit2$fitted.values)
head(pred)
pred <- data.frame(default = Default$default, fit = glm.fit2$fitted.values)
head(pred)
xtabs(~default+ (fit > 0.5), data=pred)
(40+228) / 10000
105 / (228+105)
9627 / (9627+40)
library(ROCR)
install.packages("ROCR")
library(ROCR)
predob = prediction(pred$fit, pred$default)
a <- performance(prediction.obj = predob, "tpr", "fpr" )
str(a)
plot(a)
?performance
performance(prediction.obj = predob,  "auc" )
plot(performance(prediction.obj = predob,  "auc" ))
performance(predob , "auc")
plot(performance(predob , "auc", "err"))
plot(performance(predob ,  "err"))
e <- performance(predob ,  "err")
str(e)
head(e@y.values )
head(e@y.values[[1]] )
err <- e@y.values[[1]] )
err <- e@y.values[[1]]
cut <- e@x.values[[1]]
cut[err==min(err)]
pred_smarket <- data.frame(data=Smarket, Derection = Direction, fit = glm.smarket$fitted.values)
pred_smarket <- data.frame(Direction = Smarket$Direction, fit = glm.smarket$fitted.values)
xtabs(~Direction+(fit>0.5), data=pred_smarket)
xtabs(~default+ (fit > 0.5), data=pred)
str(Smarket)
(141+457) / 1250
507 / (141+507) # 민감도
145 / (145+457) # 특이도
predsmark_ob <- prediction(pred_smarket$fit, pred_smarket$Direction)
smarket_perf <- performance(prediction.obj = pred_smarket, "tpr", "fpr" )
smarket_perf <- performance(prediction.obj = pred_smarket, "tpr" )
predsmark_ob <- prediction(pred_smarket$fit, pred_smarket$Direction)
smarket_perf <- performance(prediction.obj = predsmark_ob, "tpr" , "fpr")
plot(smarket_perf)
plot(performance(predsmark_ob ,  "err")) ## cutoff 증가에 따른 error율
plot(performance(predsmark_ob ,  "err")) ## cutoff 증가에 따른 error율
e <- performance(predsmark_ob ,  "err")
e1 <- performance(predsmark_ob ,  "err")
e <- performance(predob ,  "err")
err <- e1@y.values[[1]]
cut <- e1@x.values[[1]]
err <- e@y.values[[1]]
cut <- e@x.values[[1]]
cut[err1== min(err1)]
err1 <- e1@y.values[[1]]
cut1 <- e1@x.values[[1]]
cut[err1== min(err1)]
err1 <- e1@y.values[[1]]
cut1 <- e1@x.values[[1]]
cut[err1== min(err1)][[1]]
str(Smarket)
performance(presmark_ob, "auc")
performance(predsmark_ob, "auc")
min(err1)
cut[err1 == min(err1)][[1]]
err1 <- e1@y.values[[1]]
err1
err1 == min(err1)
err1[err1 == min(err1)]
cut[err1 == min(err1)[[1]]
]
cut[err1 == min(err1)][[1]]
which(err1 == min(err1))
cut1[err1 == min(err1)][[1]]
head(Smarket)
str(Smarket)
str(Default)
library(ISLR)
str(Default)
