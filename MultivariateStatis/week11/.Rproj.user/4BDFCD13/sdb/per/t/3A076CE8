{
    "contents" : "install.packages('ISLR')\nlibrary(ISLR)\n\nboxplot(balance~default, data=Default)\n# Default == Yes 일대 Balance가 더 높다. \n\nboxplot(income~default, data=Default)\n# Default 값에 따라 income 이 별 차이 없다.(중요도가 떨어짐)\n\n## logistic\n# family= binomial 로 해야 logistic 분석인지를 앎\nglm.fit <- glm(default~balance, data=Default, family=\"binomial\") \nsummary(glm.fit)\n# Call:\n#   glm(formula = default ~ balance, family = \"binomial\", data = Default)\n# \n# Deviance Residuals: \n#   Min       1Q   Median       3Q      Max  \n# -2.2697  -0.1465  -0.0589  -0.0221   3.7589  \n# \n# Coefficients:\n#   Estimate Std. Error z value Pr(>|z|)    \n# (Intercept) -1.065e+01  3.612e-01  -29.49   <2e-16 ***   B0에 대한 변수\n#   balance      5.499e-03  2.204e-04   24.95   <2e-16 ***   balance 의 해석 : 카드잔고가 1 증가 시, 파산에 대한 odds(가능성) 1.005514(0.6%) 증가를 의미\n#   ---\n#   Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1\n# \n# (Dispersion parameter for binomial family taken to be 1)\n# \n# Null deviance: 2920.6  on 9999  degrees of freedom\n# Residual deviance: 1596.5  on 9998  degrees of freedom\n# AIC: 1600.5\n# \n# Number of Fisher Scoring iterations: 8\n\n## balnace가 1000일때의 예측\na <- predict(glm.fit, data.frame(balance=1000))\n## - 5.152414  P(X) = exp(B0 + B1X) <- 요값이 확률을 의미 / 1+exp(B0+B1X)\n\nexp(a) / (1+exp(a))\n## 0.005752145 \n\npredict(glm.fit, data.frame(balance=1000), type=\"response\") ## 위의exp 한  확률을 바로 얻고자 하는 경우\n\n############ Multiple logistic Regression \n# student : 학생여부(1 : O / 0 : X)\nglm.fit2 <- glm(default~balance+income+student, data=Default, family=\"binomial\") \nsummary(glm.fit2)\nstr(Default)\n# \n# Call:\n#   glm(formula = default ~ balance + income + student, family = \"binomial\", \n#       data = Default)\n# \n# Deviance Residuals: \n#   Min       1Q   Median       3Q      Max  \n# -2.4691  -0.1418  -0.0557  -0.0203   3.7383  \n# \n# Coefficients:\n#   Estimate Std. Error z value Pr(>|z|)    \n# (Intercept) -1.087e+01  4.923e-01 -22.080  < 2e-16 ***\n#   balance      5.737e-03  2.319e-04  24.738  < 2e-16 ***\n#   income       3.033e-06  8.203e-06   0.370  0.71152    \n# studentYes  -6.468e-01  2.363e-01  -2.738  0.00619 **  -> factor중에서 Yes인 값의 dummy 변수를 의미\n#   ---\n#   Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1\n# \n# (Dispersion parameter for binomial family taken to be 1)\n# \n# Null deviance: 2920.6  on 9999  degrees of freedom\n# Residual deviance: 1571.5  on 9996  degrees of freedom\n# AIC: 1579.5\n# \n# Number of Fisher Scoring iterations: 8\n\nexp(-6.468e-01)  ## 0.523718  \n## 학생이면 파산확률이 반으로 줄어든다는 의미 인데 이런 해석은 X \n## 같은 수입에 잔고가 같은 경우에 50% 로 줄어든다는 해석이 맞는 의미다.\n\n# student만 넣을경우\nglm.fit3 <- glm(default~student, data=Default, family=\"binomial\") \nsummary(glm.fit3)\n\nexp(0.40489) ## 이럴 경우 50% 증가하게 됨.\n## 이 말은 학생의 잔고가 더 많다는 의미를 나타냄.\n\n#위의 exp(0.40489)를 통해 balance 와 student 의 boxplot을 확인해보면\nboxplot(balance~student, data=Default)\n##학생이면은 balance가 높기때문에 파산 가능성이 높아짐.\n\n## 모형비교\nanova(glm.fit2, glm.fit, test=\"Chisq\")\n# income+balance가 default를 설명하는데 유의하다는 것을 알 수 있음. (3.904e-06)\n\n# Analysis of Deviance Table\n# \n# Model 1: default ~ balance + income + student\n# Model 2: default ~ balance\n# Resid. Df Resid. Dev Df Deviance  Pr(>Chi)    \n# 1      9996     1571.5                          \n# 2      9998     1596.5 -2  -24.907 3.904e-06 ***\n#   ---\n#   Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1\n\ncoupon= read.csv(\"coupon.csv\")\nhead(coupon)\n## 1000개의 관측치를 5개의 행으로 summary \n?glm\n\n## cbind(성공.실패)\nglm.fit4 <- glm(cbind(N_redeemed, N-N_redeemed)~Price_reduc, data=coupon, family=\"binomial\")\nsummary(glm.fit4)                \n\n\n# Call:\n#   glm(formula = cbind(N_redeemed, N - N_redeemed) ~ Price_reduc, \n#       family = \"binomial\", data = coupon)\n# \n# Deviance Residuals: \n#   1        2        3        4        5  \n# -0.8988   0.6677  -0.1837   0.7612  -0.5477  \n# \n# Coefficients:\n#   Estimate Std. Error z value Pr(>|z|)    \n# (Intercept) -2.044348   0.160977  -12.70   <2e-16 ***\n#   Price_reduc  0.096834   0.008549   11.33   <2e-16 ***  # 액면가가 유의하다\n#   ---\n#   Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1\n# \n# (Dispersion parameter for binomial family taken to be 1)\n# \n# Null deviance: 149.4627  on 4  degrees of freedom\n# Residual deviance:   2.1668  on 3  degrees of freedom\n# AIC: 33.793\n# \n# Number of Fisher Scoring iterations: 3\n\nexp(0.096834)\n## 쿠폰의 액면가가 1불 증가 할 때, 쿠폰 사용확률이 10% 증가한다는 의미\n\nexp(0.096834*5) ## 액면가가 5불 증가할 때\n## 쿠폰의 액면가가 5불 증가 할 때, 쿠폰 사용확률이 62% 증가한다는 의미\n\n## 오분류율, 민감도, 특이도\nstr(glm.fit2)\n## default를 numeric 으로 변환\nplot(as.numeric(default) -1~balance, data = Default)  ## balance에 대해 0이 defaul가 아닌거 1이 default인거를 나타냄\npoints(Default$balance, glm.fit2$fitted.values, col=2)  ## 추정한 값들의 예측이 그래프로 표시된다.\n\nglm.fit2$fitted.values ## 각각의 관측에 대한 default의 확률 예측한 것\n\n## default와 예측한 확률값(glm)을 넣음\npred <- data.frame(default = Default$default, fit = glm.fit2$fitted.values)\nhead(pred)\n## Default의 cutoff를 0.5 보다 크면 파산 아니면 파산 아니다를 구하자\nxtabs(~default+ (fit > 0.5), data=pred)\n\n#       fit > 0.5\n# default FALSE TRUE\n# No   9627   40\n# Yes   228  105\n\n## 오분류율 계산\n(40+228) / 10000 \n## 민감도 \n105 / (228+105)\n## 특이도\n9627 / (9627+40)\n\n### 위의 결과 특이도가 굉장히 높고, 민감도가 낮음(cutree에 따라 달라진다.)\n\n## ROCR Curve\ninstall.packages(\"ROCR\")\nlibrary(ROCR)\n\n## 추정한 확률값 , 실제값\npredob = prediction(pred$fit, pred$default)\n## predicion obj , index\n# tpr : true positive rate\n# fpr : false positive rate\na <- performance(prediction.obj = predob, \"tpr\", \"fpr\" )\nstr(a)\n\n# Formal class 'performance' [package \"ROCR\"] with 6 slots\n# ..@ x.name      : chr \"False positive rate\"\n# ..@ y.name      : chr \"True positive rate\"\n# ..@ alpha.name  : chr \"Cutoff\"\n# ..@ x.values    :List of 1 :   1-특이도\n# .. ..$ : num [1:10001] 0 0 0 0 0 ...\n# ..@ y.values    :List of 1 :   민감도 \n# .. ..$ : num [1:10001] 0 0.003 0.00601 0.00901 0.01201 ...\n# ..@ alpha.values:List of 1\n# .. ..$ : num [1:10001] Inf 0.978 0.974 0.966 0.957 ...\nplot(a)\n\n## AUC 값을 구하고 싶다면\n?performance \nperformance(predob , \"auc\")\n# An object of class \"performance\"\n# Slot \"x.name\":\n#   [1] \"None\"\n# \n# Slot \"y.name\":\n#   [1] \"Area under the ROC curve\"\n# \n# Slot \"alpha.name\":\n#   [1] \"none\"\n# \n# Slot \"x.values\":\n#   list()\n# \n# Slot \"y.values\":\n#   [[1]]\n# [1] 0.9495581  : 요게 auc값\n# \n# \n# Slot \"alpha.values\":\n#   list()\n\nplot(performance(predob ,  \"err\")) ## cutoff 증가에 따른 error율\ne <- performance(predob ,  \"err\")\nstr(e)\n## error rate 값\nerr <- e@y.values[[1]]\ncut <- e@x.values[[1]]\n\n## 에러를 작게 하는 cutoff 수 확인\ncut[err==min(err)]  ## 0.4298679\n\n\n\n\n############################### HW5 ##################################\nhead(Smarket)  ## 주가 수익률\n# Lag 1 ~ 5 : 전일의 주가 수익률\n# volumn : 전일 거래량 \n# Today : 오늘 수익률 \n# Direction : 시작이 상승 했는지 여부(Up/Down)\n\nglm.smarket <- glm(Direction ~ Lag1+Lag2+Lag3+Lag4+Lag5+Volume, data=Smarket, family=\"binomial\")\nsummary(glm.smarket)  ## Up에 대한 summary로 보면 됨.\nhead(Smarket)\nstr(Smarket)\n# \n# Call:\n#   glm(formula = Direction ~ Lag1 + Lag2 + Lag3 + Lag4 + Lag5 + \n#         Volume, family = \"binomial\", data = Smarket)\n# \n# Deviance Residuals: \n#   Min      1Q  Median      3Q     Max  \n# -1.446  -1.203   1.065   1.145   1.326  \n# \n# Coefficients:\n#               Estimate Std. Error z value Pr(>|z|) = P-Value\n# (Intercept) -0.126000   0.240736  -0.523    0.601  B0   \n# Lag1        -0.073074   0.050167  -1.457    0.145  B1\n# Lag2        -0.042301   0.050086  -0.845    0.398  B2\n# Lag3         0.011085   0.049939   0.222    0.824  B3\n# Lag4         0.009359   0.049974   0.187    0.851  B4\n# Lag5         0.010313   0.049511   0.208    0.835  B5\n# Volume       0.135441   0.158360   0.855    0.392  B6\n# \n# (Dispersion parameter for binomial family taken to be 1)\n# \n# Null deviance: 1731.2  on 1249  degrees of freedom\n# Residual deviance: 1727.6  on 1243  degrees of freedom\n# AIC: 1741.6\n# \n# Number of Fisher Scoring iterations: 3\nexp(0.010313 * 0.01)\nexp(0.135441)\n\nstr(Smarket)\n\npred_smarket <- data.frame(Direction = Smarket$Direction, fit = glm.smarket$fitted.values)\nxtabs(~Direction+(fit>0.5), data=pred_smarket)\n\n(141+457) / 1250  # 오분류율\n507 / (141+507) # 민감도\n145 / (145+457) # 특이도\npredsmark_ob <- prediction(pred_smarket$fit, pred_smarket$Direction)\nsmarket_perf <- performance(prediction.obj = predsmark_ob, \"tpr\" , \"fpr\")\nplot(smarket_perf)\n\n# 오류율\nplot(performance(predsmark_ob ,  \"err\")) ## cutoff 증가에 따른 error율\ne1 <- performance(predsmark_ob ,  \"err\")\n\nerr1 <- e1@y.values[[1]]\ncut1 <- e1@x.values[[1]]\n\ncut1[err1 == min(err1)][[1]]\n\n## 0.5069883\n\n###################################################################################",
    "created" : 1448080935699.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3417244599",
    "id" : "3A076CE8",
    "lastKnownWriteTime" : 1448537593,
    "path" : "C:/MultivariateStatis/week11/week11.R",
    "project_path" : "week11.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_source"
}